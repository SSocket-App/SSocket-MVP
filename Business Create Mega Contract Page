// SSocketContractForm.js
// Full page with Termination Terms box integrated.
// Title: "Create Mega Contract", clarified SSocket conditions, exact payment note,
// updated Agreement text, working chat keyboard + red finalize warning.
// Expo (React Native) compatible, no external libs.

import React, { useMemo, useRef, useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  ScrollView,
  StyleSheet,
  Platform,
  TouchableOpacity,
  TextInput,
  Alert,
  KeyboardAvoidingView,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const YELLOW = "#FFD54A";
const BLACK = "#000";
const WHITE = "#FFF";
const RED = "#D32F2F";

export default function SSocketContractForm() {
  /* ===== Form State ===== */
  const [contracteeName, setContracteeName] = useState("");
  const [contractorName, setContractorName] = useState("");

  const [workDescription, setWorkDescription] = useState("");
  const [workRules, setWorkRules] = useState("");
  const [terminationTerms, setTerminationTerms] = useState(""); // NEW

  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [probationDays, setProbationDays] = useState("7");

  const [currency] = useState("NGN"); // fixed
  const [salary, setSalary] = useState(""); // single value (no min/max)

  const [paymentSchedule, setPaymentSchedule] = useState("on_completion"); // on_completion | weekly | monthly | milestones
  const [paymentDetails, setPaymentDetails] = useState(""); // required if on_completion or milestones

  const [bonusEnabled, setBonusEnabled] = useState(false);
  const [bonusTerms, setBonusTerms] = useState("");

  const [deductionEnabled, setDeductionEnabled] = useState(false);
  const [deductionTerms, setDeductionTerms] = useState("");

  const [acceptRules, setAcceptRules] = useState(false);

  // Negotiation chat (contractee-only input)
  const [negotiationOpen, setNegotiationOpen] = useState(false);
  const [negotiationInput, setNegotiationInput] = useState("");
  const [negotiationMsgs, setNegotiationMsgs] = useState([]); // { by: "Contractee", text: string }
  const inputRef = useRef(null);

  const today = useMemo(() => new Date().toISOString().slice(0, 10), []);
  const [preview, setPreview] = useState("");

  /* ===== Handlers ===== */
  const addNegotiationMsg = () => {
    const text = negotiationInput.trim();
    if (!text) return;
    setNegotiationMsgs((prev) => [...prev, { by: "Contractee", text }]);
    setNegotiationInput("");
  };

  const validate = () => {
    if (!contracteeName || !contractorName) return "Enter both party names.";
    if (!workDescription) return "Add a work description.";
    if (!startDate) return "Provide a start date (YYYY-MM-DD).";
    if (!endDate) return "Provide an end date/deadline (YYYY-MM-DD).";
    if (!salary) return "Enter a salary amount.";
    if (
      (paymentSchedule === "on_completion" || paymentSchedule === "milestones") &&
      !paymentDetails.trim()
    ) {
      return "Please specify in details how this payment option works.";
    }
    if (!acceptRules) return "Please tick 'I agree' in Agreement.";
    return null;
  };

  const generatePreview = () => {
    const err = validate();
    if (err) {
      Alert.alert("Missing info", err);
      return;
    }
    const negotiationBlock =
      negotiationMsgs.length > 0
        ? negotiationMsgs.map((m, i) => `   ${i + 1}. [${m.by}] ${m.text}`).join("\n")
        : "   (No entries yet)";

    const text =
      `SSocket Basic Contractor Contract (MVP)\n\n` +
      `1) Parties\n` +
      `   Contractee: ${contracteeName}\n` +
      `   Contractor: ${contractorName}\n\n` +
      `2) Work Description\n` +
      `   ${workDescription}\n\n` +
      `3) Work Rules (by Contractee)\n` +
      `   ${workRules || "(Not specified)"}\n\n` +
      `4) Termination Terms\n` +
      `   ${terminationTerms || "(Not specified)"}\n\n` +
      `5) Duration\n` +
      `   Start: ${startDate}\n` +
      `   End/Deadline: ${endDate}\n` +
      `   Probation: ${probationDays} day(s)\n\n` +
      `6) Payment\n` +
      `   Salary: ${currency} ${salary}\n` +
      `   Schedule: ${labelizeSchedule(paymentSchedule)}\n` +
      (paymentSchedule === "on_completion" || paymentSchedule === "milestones"
        ? `   Details: ${paymentDetails}\n`
        : ``) +
      `   Please not SSocket does not charge you any percent of your payment. (Payments via SSocket bank app.)\n\n` +
      `7) Bonus & Deductions\n` +
      `   Bonus: ${bonusEnabled ? bonusTerms || "Yes (terms not specified)" : "None"}\n` +
      `   Deductions: ${deductionEnabled ? deductionTerms || "Yes (terms not specified)" : "None"}\n\n` +
      `8) Agreement\n` +
      `   • I agree to: deliver as described and to keep up with payment as promised.\n\n` +
      `9) Negotiate Contract — Non-deletable Chat Log\n` +
      `${negotiationBlock}\n\n` +
      `   SSocket Conditions:\n` +
      `   1. Use this chat to agree on: work rules, termination terms, payments, bonuses/deductions, probation & duration, and the work description. The details you agree here must match the form. If there’s a mismatch, this chat is SSocket’s first reference.\n` +
      `   2. During probation, either party may terminate the contract without penalty.\n` +
      `   3. If probation ends early, the contractor is paid for work already completed. Agree the probation payment structure here before probation starts.\n` +
      `\nGenerated: ${today}`;
    setPreview(text);
  };

  const leavePage = () => {
    Alert.alert("Leave contract page", "Your changes may not be saved.", [
      { text: "Stay", style: "cancel" },
      { text: "Leave", style: "destructive", onPress: () => {} },
    ]);
  };

  const sealContract = () => {
    const err = validate();
    if (err) {
      Alert.alert("Cannot seal contract", err);
      return;
    }
    Alert.alert(
      "Seal Contract",
      "Once sealed by both parties, no adjustments can be made.",
      [{ text: "Cancel", style: "cancel" }, { text: "Seal", style: "default" }]
    );
  };

  /* ===== UI ===== */
  const goBack = () => Alert.alert("Back", "Hook this into navigation.");

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.backBtn} activeOpacity={0.8} onPress={goBack}>
          <Ionicons name="arrow-back-outline" size={22} color={WHITE} />
        </TouchableOpacity>
        <Text style={styles.topTitle}>Create Mega Contract</Text>
        <View style={{ width: 40 }} />
      </View>
      <View style={styles.topAccent} />

      <KeyboardAvoidingView
        behavior={Platform.select({ ios: "padding", android: undefined })}
        style={{ flex: 1 }}
      >
        <ScrollView
          contentContainerStyle={{ paddingBottom: 20 }}
          keyboardShouldPersistTaps="handled"
        >
          {/* Parties */}
          <Card>
            <Text style={styles.cardTitle}>Parties</Text>
            <Field
              label="Contractee (Employer)"
              placeholder="e.g., Ada Ventures Ltd"
              value={contracteeName}
              onChangeText={setContracteeName}
            />
            <Field
              label="Contractor (Worker)"
              placeholder="e.g., John Doe"
              value={contractorName}
              onChangeText={setContractorName}
            />
          </Card>

          {/* Work Description */}
          <Card>
            <Text style={styles.cardTitle}>Work Description</Text>
            <MultilineField
              label="What work will be done?"
              placeholder="e.g., 4-page company website with contact form"
              value={workDescription}
              onChangeText={setWorkDescription}
            />
            <Text style={styles.helperNote}>
              Description should be as detailed as possible.
            </Text>
          </Card>

          {/* Work Rules */}
          <Card>
            <Text style={styles.cardTitle}>Work Rules</Text>
            <MultilineField
              label="State your work rules (communication times, tools, delivery format, approvals, etc.)"
              placeholder="e.g., Daily check-in by 9am, updates in SSocket chat, deliver Figma links + assets..."
              value={workRules}
              onChangeText={setWorkRules}
            />
          </Card>

          {/* Termination Terms (NEW) */}
          <Card>
            <Text style={styles.cardTitle}>Termination Terms</Text>
            <MultilineField
              label="State termination conditions"
              placeholder="e.g., Either party may terminate with 14 days written notice after probation. Early termination requires payment for work done to date."
              value={terminationTerms}
              onChangeText={setTerminationTerms}
            />
          </Card>

          {/* Duration */}
          <Card>
            <Text style={styles.cardTitle}>Duration & Probation</Text>
            <Field
              label="Start Date (YYYY-MM-DD)"
              placeholder="2025-09-01"
              value={startDate}
              onChangeText={setStartDate}
              keyboardType="numbers-and-punctuation"
            />
            <Field
              label="End Date / Deadline (YYYY-MM-DD)"
              placeholder="2025-10-01"
              value={endDate}
              onChangeText={setEndDate}
              keyboardType="numbers-and-punctuation"
            />
            <Field
              label="Probation (days)"
              placeholder="7"
              value={probationDays}
              onChangeText={setProbationDays}
              keyboardType="numeric"
            />
          </Card>

          {/* Payment */}
          <Card>
            <Text style={styles.cardTitle}>Payment</Text>

            {/* Currency fixed to NGN */}
            <View style={styles.row}>
              <BadgeYellow text="NGN" />
            </View>

            {/* Salary only */}
            <Field
              label={`Salary (${currency})`}
              placeholder="e.g., 200000"
              value={salary}
              onChangeText={setSalary}
              keyboardType="numeric"
            />

            {/* Payment Schedule */}
            <SmallLabel text="Payment Schedule" />
            <View style={styles.row}>
              <Pill
                label="On Completion"
                active={paymentSchedule === "on_completion"}
                onPress={() => setPaymentSchedule("on_completion")}
              />
              <Pill
                label="Weekly"
                active={paymentSchedule === "weekly"}
                onPress={() => setPaymentSchedule("weekly")}
              />
              <Pill
                label="Monthly"
                active={paymentSchedule === "monthly"}
                onPress={() => setPaymentSchedule("monthly")}
              />
              <Pill
                label="Milestones"
                active={paymentSchedule === "milestones"}
                onPress={() => setPaymentSchedule("milestones")}
              />
            </View>

            {(paymentSchedule === "on_completion" ||
              paymentSchedule === "milestones") && (
              <MultilineField
                label="Please specify in details how this works"
                placeholder={
                  paymentSchedule === "milestones"
                    ? "e.g., 30% on onboarding, 40% mid-way, 30% on completion"
                    : "e.g., 100% payable within 7 days of deliverable approval"
                }
                value={paymentDetails}
                onChangeText={setPaymentDetails}
              />
            )}

            {/* Exact note text as requested */}
            <Info text="Please not SSocket does not charge you any percent of your payment" />
          </Card>

          {/* Bonus & Deductions */}
          <Card>
            <Text style={styles.cardTitle}>Bonus & Deductions</Text>

            <View style={styles.row}>
              <Pill
                label={bonusEnabled ? "Bonus: ON" : "Bonus: OFF"}
                active={bonusEnabled}
                onPress={() => setBonusEnabled(!bonusEnabled)}
              />
              <Pill
                label={deductionEnabled ? "Deductions: ON" : "Deductions: OFF"}
                active={deductionEnabled}
                onPress={() => setDeductionEnabled(!deductionEnabled)}
              />
            </View>

            {bonusEnabled && (
              <MultilineField
                label="Bonus Terms"
                placeholder="e.g., ₦50,000 if delivered 1 week early or +10% for exceeding KPI"
                value={bonusTerms}
                onChangeText={setBonusTerms}
              />
            )}
            {deductionEnabled && (
              <MultilineField
                label="Deductions Terms"
                placeholder="e.g., -10% if late without notice; -₦20,000 per missed milestone"
                value={deductionTerms}
                onChangeText={setDeductionTerms}
              />
            )}
          </Card>

          {/* Agreement */}
          <Card>
            <Text style={styles.cardTitle}>Agreement</Text>
            <CheckboxRow
              checked={acceptRules}
              onToggle={() => setAcceptRules(!acceptRules)}
              label="I agree to: deliver as described and to keep up with payment as promised"
            />
          </Card>

          {/* Negotiate Contract (chat look) */}
          <Card>
            <Text style={styles.cardTitle}>Negotiate Contract</Text>

            {/* Toggle open/close */}
            <TouchableOpacity
              activeOpacity={0.9}
              style={styles.chatToggle}
              onPress={() => {
                setNegotiationOpen((s) => !s);
                setTimeout(() => inputRef.current?.focus(), 50);
              }}
            >
              <Ionicons
                name={negotiationOpen ? "chevron-up" : "chevron-down"}
                size={18}
                color={BLACK}
              />
              <Text style={[styles.chatToggleTxt, { marginLeft: 8 }]}>
                {negotiationOpen ? "Hide Chat" : "Open Chat"}
              </Text>
            </TouchableOpacity>

            {negotiationOpen && (
              <>
                {/* Chat area */}
                <View style={styles.chatArea}>
                  {negotiationMsgs.length === 0 ? (
                    <Text style={styles.chatEmpty}>
                      No messages yet. Start the negotiation below.
                    </Text>
                  ) : (
                    negotiationMsgs.map((m, idx) => {
                      const mine = m.by === "Contractee";
                      return (
                        <View
                          key={idx}
                          style={[
                            styles.bubbleWrap,
                            { alignItems: mine ? "flex-end" : "flex-start" },
                          ]}
                        >
                          <View
                            style={[
                              styles.bubble,
                              {
                                backgroundColor: mine ? YELLOW : WHITE,
                                borderColor: BLACK,
                              },
                            ]}
                          >
                            <Text style={styles.bubbleBy}>[{m.by}]</Text>
                            <Text style={styles.bubbleTxt}>{m.text}</Text>
                          </View>
                        </View>
                      );
                    })
                  )}
                </View>

                {/* Input bar (chat keyboard with attach options) */}
                <View style={styles.inputBar}>
                  <TouchableOpacity
                    onPress={() => Alert.alert("Attach", "Pick a file (mock).")}
                    style={styles.kbBtn}
                    activeOpacity={0.85}
                  >
                    <Ionicons name="document-attach-outline" size={18} color={BLACK} />
                  </TouchableOpacity>
                  <TouchableOpacity
                    onPress={() => Alert.alert("Image", "Pick an image (mock).")}
                    style={[styles.kbBtn, { marginLeft: 6 }]}
                    activeOpacity={0.85}
                  >
                    <Ionicons name="image-outline" size={18} color={BLACK} />
                  </TouchableOpacity>

                  <TextInput
                    ref={inputRef}
                    value={negotiationInput}
                    onChangeText={setNegotiationInput}
                    placeholder="Type a message..."
                    placeholderTextColor="#666"
                    style={[styles.kbInput, { marginLeft: 6 }]}
                    multiline
                    onFocus={() => setNegotiationOpen(true)}
                    returnKeyType="send"
                    onSubmitEditing={addNegotiationMsg}
                    blurOnSubmit={false}
                  />
                  <TouchableOpacity
                    onPress={addNegotiationMsg}
                    style={[styles.sendBtn, { marginLeft: 6 }]}
                    activeOpacity={0.9}
                  >
                    <Ionicons name="send-outline" size={16} color={BLACK} />
                    <Text style={{ color: BLACK, fontWeight: "900", fontSize: 12, marginLeft: 6 }}>
                      Send
                    </Text>
                  </TouchableOpacity>
                </View>

                {/* Conditions (clarified) */}
                <View style={styles.conditionsBox}>
                  <Text style={styles.conditionItem}>
                    1. Use this chat to agree on: work rules, termination terms, payments,
                    bonuses/deductions, probation & duration, and the work description.
                    What you agree here must match the form. If there’s a mismatch, this chat
                    is SSocket’s first reference.
                  </Text>
                  <Text style={styles.conditionItem}>
                    2. During probation, either party may terminate the contract without penalty.
                  </Text>
                  <Text style={styles.conditionItem}>
                    3. If probation ends early, the contractor is paid for work already
                    completed. Agree the probation payment structure here before probation starts.
                  </Text>
                </View>
              </>
            )}
          </Card>

          {/* Finalize (Signatures removed → two buttons) */}
          <Card>
            <Text style={styles.cardTitle}>Finalize</Text>
            <View style={styles.row}>
              <TouchableOpacity
                style={[styles.actionBtn, styles.actionGhost]}
                activeOpacity={0.9}
                onPress={leavePage}
              >
                <Text style={styles.actionGhostTxt}>Leave Contract Page</Text>
              </TouchableOpacity>
              <View style={{ width: 10 }} />
              <TouchableOpacity
                style={[styles.actionBtn, styles.actionPrimary]}
                activeOpacity={0.9}
                onPress={sealContract}
              >
                <Text style={styles.actionPrimaryTxt}>Seal Contract</Text>
              </TouchableOpacity>
            </View>
            <Text style={[styles.sealWarn, { color: RED, fontWeight: "900" }]}>
              Once sealed by both parties, no adjustment can be made
            </Text>

            {/* Preview Button */}
            <TouchableOpacity
              style={styles.previewBtn}
              activeOpacity={0.9}
              onPress={generatePreview}
            >
              <Ionicons name="eye-outline" size={16} color={BLACK} />
              <Text style={{ color: BLACK, fontWeight: "900", fontSize: 13, marginLeft: 8 }}>
                Preview Contract
              </Text>
            </TouchableOpacity>
          </Card>

          {/* Preview */}
          <Card>
            <Text style={styles.cardTitle}>Preview</Text>
            {preview ? (
              <View style={styles.previewBox}>
                <Text selectable style={styles.previewText}>{preview}</Text>
              </View>
            ) : (
              <Text style={styles.helperNote}>
                Fill the form and tap Preview to see the generated contract.
              </Text>
            )}
          </Card>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

/* ================= Reusable bits ================= */

function Card({ children }) {
  return <View style={styles.card}>{children}</View>;
}

function Field({ label, value, onChangeText, placeholder, keyboardType = "default" }) {
  return (
    <View style={{ marginTop: 8 }}>
      <Text style={styles.fieldLabel}>{label}</Text>
      <TextInput
        value={value}
        onChangeText={onChangeText}
        placeholder={placeholder}
        placeholderTextColor="#666"
        keyboardType={keyboardType}
        style={styles.input}
      />
    </View>
  );
}

function MultilineField({ label, value, onChangeText, placeholder }) {
  return (
    <View style={{ marginTop: 8 }}>
      <Text style={styles.fieldLabel}>{label}</Text>
      <TextInput
        value={value}
        onChangeText={onChangeText}
        placeholder={placeholder}
        placeholderTextColor="#666"
        multiline
        textAlignVertical="top"
        style={[styles.input, { height: 96, paddingTop: 12 }]}
      />
    </View>
  );
}

function SmallLabel({ text }) {
  return <Text style={styles.smallLabel}>{text}</Text>;
}

function Pill({ label, active, onPress }) {
  return (
    <TouchableOpacity
      onPress={onPress}
      activeOpacity={0.9}
      style={[styles.pill, active ? styles.pillActive : styles.pillIdle]}
    >
      <Text style={[styles.pillTxt, active ? styles.pillTxtActive : styles.pillTxtIdle]}>
        {label}
      </Text>
    </TouchableOpacity>
  );
}

function BadgeYellow({ text }) {
  return (
    <View style={styles.badgeYellow}>
      <Text style={styles.badgeYellowText}>{text}</Text>
    </View>
  );
}

function CheckboxRow({ checked, onToggle, label }) {
  return (
    <TouchableOpacity style={styles.checkboxRow} activeOpacity={0.85} onPress={onToggle}>
      <View style={[styles.checkboxBox, checked && styles.checkboxChecked]}>
        {checked ? <Ionicons name="checkmark" size={14} color={BLACK} /> : null}
      </View>
      <Text style={styles.checkboxLabel}>{label}</Text>
    </TouchableOpacity>
  );
}

function Info({ text }) {
  return (
    <View style={styles.infoBox}>
      <Text style={styles.infoText}>{text}</Text>
    </View>
  );
}

/* ================= Styles ================= */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  /* Top */
  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    alignItems: "center",
    justifyContent: "flex-end",
    paddingBottom: 14,
    position: "relative",
  },
  backBtn: { position: "absolute", left: 16, bottom: 14, padding: 6 },
  topTitle: { color: WHITE, fontSize: 20, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  /* Cards */
  card: {
    marginTop: 12,
    marginHorizontal: 14,
    padding: 14,
    borderRadius: 14,
    backgroundColor: WHITE,
    borderWidth: 2,
    borderColor: BLACK,
  },
  cardTitle: { fontSize: 16, fontWeight: "900", color: BLACK },

  fieldLabel: { color: BLACK, fontSize: 12, fontWeight: "800", marginBottom: 6 },
  input: {
    backgroundColor: WHITE,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    color: BLACK,
    paddingHorizontal: 12,
    paddingVertical: Platform.OS === "ios" ? 12 : 10,
    fontSize: 14,
  },

  /* Badges / Pills */
  badgeYellow: {
    paddingHorizontal: 8,
    paddingVertical: 3,
    borderRadius: 6,
    backgroundColor: YELLOW,
    alignSelf: "flex-start",
    borderWidth: 2,
    borderColor: BLACK,
    marginTop: 6,
    marginRight: 6,
  },
  badgeYellowText: { color: BLACK, fontSize: 12, fontWeight: "800" },

  row: { flexDirection: "row", alignItems: "center", flexWrap: "wrap", marginTop: 6 },

  smallLabel: { fontSize: 12, color: "#444", marginTop: 8, marginBottom: 4, fontWeight: "900" },

  pill: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 16,
    borderWidth: 2,
    marginRight: 8,
    marginBottom: 8,
  },
  pillIdle: { backgroundColor: WHITE, borderColor: BLACK },
  pillActive: { backgroundColor: YELLOW, borderColor: BLACK },
  pillTxt: { fontSize: 12, fontWeight: "900" },
  pillTxtIdle: { color: BLACK },
  pillTxtActive: { color: BLACK },

  helperNote: { color: "#555", fontSize: 11, marginTop: 6 },

  /* Agreement */
  checkboxRow: { flexDirection: "row", alignItems: "center", marginTop: 6 },
  checkboxBox: {
    width: 18,
    height: 18,
    borderRadius: 6,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
    alignItems: "center",
    justifyContent: "center",
    marginRight: 10,
  },
  checkboxChecked: { backgroundColor: YELLOW },
  checkboxLabel: { color: BLACK, flex: 1, fontSize: 12, fontWeight: "700" },

  /* Info */
  infoBox: {
    marginTop: 8,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    backgroundColor: WHITE,
    padding: 10,
  },
  infoText: { color: BLACK, fontSize: 12 },

  /* Chat */
  chatToggle: {
    marginTop: 8,
    flexDirection: "row",
    alignItems: "center",
    alignSelf: "flex-start",
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
  },
  chatToggleTxt: { color: BLACK, fontWeight: "900", fontSize: 12 },

  chatArea: {
    marginTop: 10,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    backgroundColor: WHITE,
    padding: 10,
    maxHeight: 280,
  },
  chatEmpty: { color: "#666", fontSize: 12 },
  bubbleWrap: { marginVertical: 6 },
  bubble: {
    maxWidth: "84%",
    paddingVertical: 8,
    paddingHorizontal: 10,
    borderRadius: 12,
    borderWidth: 2,
  },
  bubbleBy: { fontSize: 10, fontWeight: "900", marginBottom: 2, color: BLACK },
  bubbleTxt: { fontSize: 13, lineHeight: 18, color: BLACK },

  inputBar: {
    marginTop: 8,
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    padding: 6,
    backgroundColor: WHITE,
  },
  kbBtn: {
    width: 34,
    height: 34,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: BLACK,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: WHITE,
  },
  kbInput: {
    flex: 1,
    minHeight: 34,
    maxHeight: 100,
    paddingHorizontal: 10,
    color: BLACK,
    borderWidth: 0,
  },
  sendBtn: {
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: YELLOW,
    flexDirection: "row",
    alignItems: "center",
  },

  conditionsBox: {
    marginTop: 10,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    backgroundColor: WHITE,
    padding: 10,
  },
  conditionItem: { color: BLACK, fontSize: 12, lineHeight: 18, marginBottom: 6 },

  /* Finalize */
  actionBtn: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    borderWidth: 2,
    alignItems: "center",
    justifyContent: "center",
  },
  actionGhost: { backgroundColor: WHITE, borderColor: BLACK },
  actionGhostTxt: { color: BLACK, fontWeight: "900", fontSize: 14 },
  actionPrimary: { backgroundColor: YELLOW, borderColor: BLACK },
  actionPrimaryTxt: { color: BLACK, fontWeight: "900", fontSize: 14 },

  sealWarn: { marginTop: 8, fontSize: 12 },

  previewBtn: {
    marginTop: 10,
    alignSelf: "flex-start",
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
  },

  previewBox: {
    marginTop: 8,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    backgroundColor: WHITE,
    padding: 12,
  },
  previewText: { color: BLACK, fontSize: 12, lineHeight: 18 },
});

/* ===== helpers ===== */
function labelizeSchedule(v) {
  switch (v) {
    case "on_completion":
      return "On Completion";
    case "weekly":
      return "Weekly";
    case "monthly":
      return "Monthly";
    case "milestones":
      return "Milestones";
    default:
      return v;
  }
}
