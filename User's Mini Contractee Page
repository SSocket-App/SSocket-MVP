// MiniContracteeList.js
import React, { useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  TextInput,
  Platform,
  Alert,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

/* ===== Palette / Brand ===== */
const BLACK = "#111111";
const WHITE = "#FFFFFF";
const BG = "#FFFFFF";
const TEXT = "#111111";
const MUTED = "#6b7280";
const CARD = "#ffffff";
const BDR = "#e5e7eb";
const YELLOW = "#FFD54A";
const GREEN = "#22c55e";
const RED = "#ef4444";

/* ===== Tag lists (match Mini Contractee Stats) ===== */
const GREEN_TAGS = [
  "cooperative",
  "communicative",
  "respectful",
  "trustworthy",
  "supportive",
  "professional",
  "hospitality",
  "decisive",
  "responsive",
  "responsible",
];

const RED_TAGS = [
  "disrespectful",
  "not cooperative",
  "untrustworthy",
  "unclear instructions",
  "irresponsible",
  "slow response",
  "rash",
];

/* ===== UI bits ===== */
function StarPicker({ value, onChange, size = 24 }) {
  return (
    <View style={styles.starRow}>
      {[1, 2, 3, 4, 5].map((s) => (
        <TouchableOpacity
          key={s}
          onPress={() => onChange(s)}
          activeOpacity={0.85}
          style={{ padding: 4 }}
        >
          <Ionicons
            name={value >= s ? "star" : "star-outline"}
            size={size}
            color={BLACK}
          />
        </TouchableOpacity>
      ))}
      <Text style={styles.starNum}>{(value || 0).toFixed(1)}★</Text>
    </View>
  );
}
function Chip({ text, active, onPress }) {
  return (
    <TouchableOpacity
      onPress={onPress}
      activeOpacity={0.85}
      style={[
        styles.chip,
        active && { backgroundColor: "#fef9c3", borderColor: "#d4d4d8" },
      ]}
    >
      <Text style={[styles.chipTxt, active && { fontWeight: "800" }]}>
        {text}
      </Text>
    </TouchableOpacity>
  );
}

/* ===== Demo data (Ongoing/Ended contracts) ===== */
const DEMO_CONTRACTS = [
  {
    id: "MC-1048",
    title: "Block setting for 3-bed foundation",
    role: "Mason",
    nature: "Bring basic tools; DPC experience preferred.",
    details: "Prep & set blocks to plan; quality checks required.",
    start: "2025-08-20",
    end: "2025-08-30",
    location: "Lagos, Nigeria",
    pay: "₦120,000",
    status: "Ended",
  },
  {
    id: "MC-2081",
    title: "Office Painting",
    role: "Painter",
    nature: "Prep + 2 coats emulsion, doors/frames gloss",
    details: "Paint supplied on site. Show recent work sample.",
    start: "2025-09-02",
    end: "2025-09-05",
    location: "Abuja, Nigeria",
    pay: "₦80,000",
    status: "Ongoing",
  },
];

/* ===== NEW: Demo data (Queued/Applied but not accepted) ===== */
const DEMO_QUEUED_APPS = [
  {
    id: "QA-3001",
    contractId: "CT-9001",
    title: "House Painting (Duplex)",
    role: "Painter",
    appliedOn: "2025-09-10",
    location: "Ikeja, Lagos",
    expectedPay: "₦150,000 – ₦220,000",
    status: "Queued",
  },
  {
    id: "QA-3002",
    contractId: "CT-9002",
    title: "E-commerce API Integration",
    role: "Backend Dev",
    appliedOn: "2025-09-11",
    location: "Remote",
    expectedPay: "₦280,000 – ₦380,000",
    status: "Queued",
  },
];

/* ===== Card component with dropdown feedback (for ongoing/ended) ===== */
function ContractCard({ item }) {
  const [open, setOpen] = useState(false);

  // New single rating (matches Stats' "Rating")
  const [rating, setRating] = useState(0);
  const [greenSelected, setGreenSelected] = useState([]);
  const [redSelected, setRedSelected] = useState([]);
  const [privateReview, setPrivateReview] = useState("");

  const toggle = (arr, setArr, t) => {
    setArr((prev) => (prev.includes(t) ? prev.filter((x) => x !== t) : [...prev, t]));
  };

  const canGiveFeedback = item.status === "Ended";

  const submit = () => {
    if (!rating) {
      return Alert.alert("Missing rating", "Please set the Rating (1–5).");
    }
    const payload = {
      contractId: item.id,
      rating, // single rating field
      greenTags: greenSelected,
      redTags: redSelected,
      privateReview: privateReview.trim(),
    };
    console.log("MINI_CONTRACTEE_FEEDBACK_SUBMIT", payload);
    setOpen(false); // collapse like the original dropdown UX
    Alert.alert("Submitted", "Feedback saved. Hidden until both parties submit.");
  };

  return (
    <View style={styles.card}>
      {/* Header + basics */}
      <Text style={styles.jobTitle}>{item.title}</Text>
      <Text style={styles.jobLine}>
        Roles: <Text style={styles.jobLineStrong}>{item.role}</Text>
      </Text>
      <Text style={styles.jobLine}>Nature: {item.nature}</Text>
      <Text style={styles.jobLine}>Details: {item.details}</Text>

      <View style={styles.metaGrid}>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Start</Text>
          <Text style={styles.metaVal}>{item.start}</Text>
        </View>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>End</Text>
          <Text style={styles.metaVal}>{item.end}</Text>
        </View>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Location</Text>
          <Text style={styles.metaVal}>{item.location}</Text>
        </View>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Contract Pay</Text>
          <Text style={styles.metaVal}>{item.pay}</Text>
        </View>
      </View>

      <View style={styles.statusRow}>
        <Text
          style={[
            styles.status,
            { color: item.status === "Ended" ? GREEN : RED },
          ]}
        >
          {item.status}
        </Text>

        <TouchableOpacity
          disabled={!canGiveFeedback}
          onPress={() => setOpen((v) => !v)}
          activeOpacity={0.9}
          style={[
            styles.fbBtn,
            { backgroundColor: canGiveFeedback ? "#22c55e" : "#fda4af" },
          ]}
        >
          <Ionicons
            name={canGiveFeedback ? "create-outline" : "lock-closed-outline"}
            size={16}
            color="#ffffff"
          />
          <Text style={styles.fbBtnTxt}>Give Feedback</Text>
        </TouchableOpacity>
      </View>

      {/* Double-blind note */}
      <View style={styles.blindRow}>
        <Ionicons name="lock-closed-outline" size={14} color={MUTED} />
        <Text style={styles.blindTxt}>
          {"  "}Hidden until both parties submit (double-blind)
        </Text>
      </View>

      {/* Dropdown feedback — updated to single Rating + new tags */}
      {open && (
        <View style={styles.feedbackBox}>
          {/* Rating */}
          <Text style={styles.sectionLabel}>Rating</Text>
          <StarPicker value={rating} onChange={setRating} />

          {/* Green tags */}
          <Text style={[styles.sectionLabel, { marginTop: 16 }]}>
            Green Tags (Strengths)
          </Text>
          <View style={styles.chipsWrap}>
            {GREEN_TAGS.map((t) => (
              <Chip
                key={t}
                text={t}
                active={greenSelected.includes(t)}
                onPress={() => toggle(greenSelected, setGreenSelected, t)}
              />
            ))}
          </View>

          {/* Red tags */}
          <Text style={[styles.sectionLabel, { marginTop: 16 }]}>
            Red Tags (Risks)
          </Text>
          <View style={styles.chipsWrap}>
            {RED_TAGS.map((t) => (
              <Chip
                key={t}
                text={t}
                active={redSelected.includes(t)}
                onPress={() => toggle(redSelected, setRedSelected, t)}
              />
            ))}
          </View>

          {/* Private review */}
          <Text style={[styles.sectionLabel, { marginTop: 16 }]}>
            Review <Text style={{ color: MUTED }}>(private to system)</Text>
          </Text>
          <TextInput
            value={privateReview}
            onChangeText={setPrivateReview}
            placeholder="Write a short private review..."
            placeholderTextColor="#9ca3af"
            multiline
            style={styles.reviewBox}
          />

          <View style={styles.warnRow}>
            <Ionicons name="alert-circle-outline" size={16} color={RED} />
            <Text style={styles.warnTxt}>
              {"  "}Feedback can only be submitted once and cannot be changed.
            </Text>
          </View>

          {/* Submit */}
          <TouchableOpacity
            activeOpacity={0.9}
            style={styles.submitBtn}
            onPress={submit}
          >
            <Text style={styles.submitTxt}>Submit</Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
}

/* ===== NEW: Simple card for queued applications ===== */
function QueuedCard({ item, onView }) {
  return (
    <View style={styles.card}>
      <Text style={styles.jobTitle}>{item.title}</Text>
      <Text style={styles.jobLine}>
        Role: <Text style={styles.jobLineStrong}>{item.role}</Text>
      </Text>

      <View style={styles.metaGrid}>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Applied On</Text>
          <Text style={styles.metaVal}>{item.appliedOn}</Text>
        </View>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Location</Text>
          <Text style={styles.metaVal}>{item.location}</Text>
        </View>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Expected Pay</Text>
          <Text style={styles.metaVal}>{item.expectedPay}</Text>
        </View>
        <View style={styles.metaCol}>
          <Text style={styles.metaKey}>Status</Text>
          <Text style={[styles.metaVal, { color: "#a16207" }]}>{item.status}</Text>
        </View>
      </View>

      <View style={[styles.statusRow, { marginTop: 10 }]}>
        <Text style={[styles.status, { color: "#a16207" }]}>Waiting for acceptance</Text>
        <TouchableOpacity
          onPress={() => onView?.(item)}
          activeOpacity={0.9}
          style={styles.viewBtn}
        >
          <Ionicons name="eye-outline" size={16} color={BLACK} />
          <Text style={styles.viewBtnTxt}>View</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

/* ===== Page ===== */
export default function MiniContracteeList() {
  StatusBar.setBarStyle("light-content");

  // NEW: top toggle — ongoing vs queued
  const [view, setView] = useState("ongoing"); // 'ongoing' | 'queued'

  const onViewQueuedItem = (item) => {
    // Wire up to your navigation or detail modal here
    Alert.alert("Queued Contract", `${item.title}\nRole: ${item.role}\nStatus: ${item.status}`);
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: BG }}>
      {/* Top bar */}
      <View style={styles.topBar}>
        <TouchableOpacity
          activeOpacity={0.7}
          style={{ width: 40, height: 36, justifyContent: "center" }}
        >
          <Ionicons name="chevron-back" size={24} color={"#fff"} />
        </TouchableOpacity>
        <Text style={styles.topTitle}>Mini Contractee</Text>
        <View style={{ width: 40 }} />
      </View>
      <View style={styles.topAccent} />

      {/* ===== NEW: Toggle row (minimal) ===== */}
      <View style={styles.toggleRow}>
        <TouchableOpacity
          onPress={() => setView("ongoing")}
          activeOpacity={0.9}
          style={[styles.toggleBtn, view === "ongoing" && styles.toggleActive]}
        >
          <Text style={[styles.toggleTxt, view === "ongoing" && styles.toggleTxtActive]}>
            Ongoing Contracts
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => setView("queued")}
          activeOpacity={0.9}
          style={[styles.toggleBtn, view === "queued" && styles.toggleActive]}
        >
          <Text style={[styles.toggleTxt, view === "queued" && styles.toggleTxtActive]}>
            Queued (Applied)
          </Text>
        </TouchableOpacity>
      </View>

      <ScrollView contentContainerStyle={{ padding: 12, paddingBottom: 20 }}>
        {view === "ongoing" ? (
          <>
            {DEMO_CONTRACTS.map((c) => (
              <ContractCard key={c.id} item={c} />
            ))}
          </>
        ) : (
          <>
            {DEMO_QUEUED_APPS.length === 0 ? (
              <View style={[styles.card, { alignItems: "center" }]}>
                <Text style={{ color: MUTED, fontWeight: "700" }}>You currently have no queued contracts.</Text>
              </View>
            ) : (
              DEMO_QUEUED_APPS.map((q) => (
                <QueuedCard key={q.id} item={q} onView={onViewQueuedItem} />
              ))
            )}
          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

/* ===== Styles ===== */
const styles = StyleSheet.create({
  /* Top bar */
  topBar: {
    backgroundColor: "#000",
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    paddingHorizontal: 12,
    paddingBottom: 12,
    flexDirection: "row",
    alignItems: "flex-end",
    justifyContent: "space-between",
  },
  topAccent: { height: 3, backgroundColor: YELLOW },
  topTitle: { color: "#fff", fontSize: 22, fontWeight: "900" },

  /* NEW: Toggle */
  toggleRow: {
    flexDirection: "row",
    gap: 10,
    marginTop: 10,
    paddingHorizontal: 12,
  },
  toggleBtn: {
    flex: 1,
    paddingVertical: 10,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    alignItems: "center",
    backgroundColor: WHITE,
  },
  toggleActive: { backgroundColor: "#FFFDF2", borderColor: YELLOW },
  toggleTxt: { fontSize: 13, fontWeight: "800", color: BLACK },
  toggleTxtActive: { color: BLACK },

  /* Cards */
  card: {
    backgroundColor: CARD,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: BDR,
    padding: 14,
    marginBottom: 14,
    elevation: 1,
    shadowColor: "#000",
    shadowOpacity: 0.05,
    shadowRadius: 6,
    shadowOffset: { width: 0, height: 2 },
  },
  jobTitle: { fontSize: 18, fontWeight: "900", color: TEXT, marginBottom: 6 },
  jobLine: { color: TEXT, fontSize: 14, marginTop: 2 },
  jobLineStrong: { fontWeight: "800" },

  metaGrid: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 14,
    marginTop: 10,
  },
  metaCol: { width: "46%" },
  metaKey: { fontSize: 13, color: MUTED, fontWeight: "800" },
  metaVal: { fontSize: 16, color: TEXT, fontWeight: "800", marginTop: 2 },

  statusRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginTop: 12,
  },
  status: { fontSize: 14, fontWeight: "900" },
  fbBtn: {
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
    paddingHorizontal: 14,
    paddingVertical: 10,
    borderRadius: 12,
  },
  fbBtnTxt: { color: "#fff", fontWeight: "900" },

  blindRow: { flexDirection: "row", alignItems: "center", marginTop: 10 },
  blindTxt: { color: MUTED, fontSize: 12, fontWeight: "600" },

  /* Dropdown feedback box (soft UI) */
  feedbackBox: {
    borderWidth: 1,
    borderColor: BDR,
    borderRadius: 16,
    padding: 12,
    marginTop: 10,
    backgroundColor: "#fafafa",
  },
  sectionLabel: { fontSize: 16, fontWeight: "900", color: TEXT, marginBottom: 8 },
  starRow: { flexDirection: "row", alignItems: "center", gap: 2 },
  starNum: { marginLeft: 8, fontSize: 16, fontWeight: "900", color: TEXT },

  chipsWrap: { flexDirection: "row", flexWrap: "wrap", gap: 10 },
  chip: {
    paddingVertical: 8,
    paddingHorizontal: 14,
    borderRadius: 999,
    borderWidth: 2,
    borderColor: "#111827",
    backgroundColor: "#fff",
  },
  chipTxt: { color: TEXT, fontWeight: "700" },

  reviewBox: {
    minHeight: 120,
    borderWidth: 2,
    borderColor: "#111827",
    borderRadius: 14,
    paddingHorizontal: 12,
    paddingVertical: 10,
    color: TEXT,
    backgroundColor: "#fff",
    textAlignVertical: "top",
  },
  warnRow: { flexDirection: "row", alignItems: "center", marginTop: 10 },
  warnTxt: { color: RED, fontSize: 12, fontWeight: "800" },

  submitBtn: {
    marginTop: 12,
    height: 48,
    borderRadius: 14,
    backgroundColor: YELLOW,
    alignItems: "center",
    justifyContent: "center",
  },
  submitTxt: { fontSize: 16, fontWeight: "900", color: BLACK },

  /* NEW: Queued view button */
  viewBtn: {
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
    backgroundColor: YELLOW,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  viewBtnTxt: { fontWeight: "900", color: BLACK },
});
