// MiniContracteePage.js — no extra dependencies, consistent UI, padlocked Give Feedback
import React, { useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  TextInput,
  Platform,
  KeyboardAvoidingView,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const YELLOW = "#FFD54A";
const BLACK = "#000";
const WHITE = "#FFF";
const MUTED = "#6B7280";
const BDR = "#E5E7EB";
const GREEN = "#4CAF50";
const RED = "#FF4C4C";

/** Neutral TAGS (stickers-as-tags) */
const TAG_OPTIONS = [
  "Reliable",
  "Fast",
  "Thorough",
  "Creative",
  "Safety-Focused",
  "Communicative",
  "Team Player",
  "Needs Guidance",
];

/** Sample data */
const initialContracts = [
  {
    id: "1",
    title: "House Construction",
    roles: ["Bricklayer"],
    nature: "Block setting for 3-bed foundation",
    notes: "Bring basic tools; DPC experience preferred.",
    startDate: "2025-08-20",
    endDate: "2025-08-30",
    location: "Lagos, Nigeria",
    contractPay: "₦120,000",
    status: "ended", // ended = can give feedback
    // Double-blind state
    mySubmitted: false,
    otherSubmitted: false,
    ratingPublic: 0,
    tagsPublic: [],
    myDraft: { rating: 0, tags: [], review: "" },
  },
  {
    id: "2",
    title: "Office Painting",
    roles: ["Painter"],
    nature: "Prep + 2 coats emulsion, doors/frames gloss",
    notes: "Paint supplied on site. Show recent work sample.",
    startDate: "2025-09-02",
    endDate: "2025-09-05",
    location: "Abuja, Nigeria",
    contractPay: "₦80,000",
    status: "ongoing", // ongoing = locked
    mySubmitted: false,
    otherSubmitted: false,
    ratingPublic: 0,
    tagsPublic: [],
    myDraft: { rating: 0, tags: [], review: "" },
  },
];

/** Static stars (display) */
function StarsStatic({ value, size = 18, color = YELLOW }) {
  return (
    <View style={{ flexDirection: "row" }}>
      {[1, 2, 3, 4, 5].map((i) => (
        <Ionicons
          key={i}
          name={i <= value ? "star" : "star-outline"}
          size={size}
          color={color}
        />
      ))}
    </View>
  );
}

/** Interactive stars (in form only) */
function StarsPicker({ value, onChange, disabled }) {
  return (
    <View style={{ flexDirection: "row" }}>
      {[1, 2, 3, 4, 5].map((i) => (
        <TouchableOpacity
          key={i}
          disabled={disabled}
          onPress={() => !disabled && onChange(i)}
          activeOpacity={disabled ? 1 : 0.7}
        >
          <Ionicons
            name={i <= value ? "star" : "star-outline"}
            size={24}
            color={disabled ? "#CCCCCC" : YELLOW}
          />
        </TouchableOpacity>
      ))}
    </View>
  );
}

export default function MiniContracteePage() {
  const [contracts, setContracts] = useState(initialContracts);
  const [openForm, setOpenForm] = useState({}); // { [id]: boolean }

  const updateDraft = (id, patch) => {
    setContracts((prev) =>
      prev.map((c) =>
        c.id === id ? { ...c, myDraft: { ...c.myDraft, ...patch } } : c
      )
    );
  };

  const toggleTag = (c, tag, disabled) => {
    if (disabled) return;
    const sel = new Set(c.myDraft.tags);
    sel.has(tag) ? sel.delete(tag) : sel.add(tag);
    updateDraft(c.id, { tags: Array.from(sel) });
  };

  /** Submit my feedback (one-time, only when ended & not already submitted) */
  const submitFeedback = (c) => {
    const canSubmit = c.status === "ended" && !c.mySubmitted;
    if (!canSubmit) return;
    setContracts((prev) =>
      prev.map((x) => (x.id === c.id ? { ...x, mySubmitted: true } : x))
    );
    setOpenForm((p) => ({ ...p, [c.id]: false }));
  };

  const renderItem = ({ item: c }) => {
    const isEnded = c.status === "ended";
    const canOpenForm = isEnded && !c.mySubmitted;
    const formOpen = !!openForm[c.id];
    const bothSubmitted = c.mySubmitted && c.otherSubmitted;

    return (
      <View style={styles.card}>
        {/* Title */}
        <Text style={styles.title}>{c.title}</Text>

        {/* Meta */}
        <Text style={styles.field}>Roles: {c.roles.join(", ")}</Text>
        <Text style={styles.field}>Nature: {c.nature}</Text>
        <Text style={styles.field}>Details: {c.notes}</Text>

        {/* Dates & Location & Pay */}
        <View style={styles.row}>
          <Field label="Start" value={c.startDate} />
          <Field label="End" value={c.endDate} />
        </View>
        <View style={styles.row}>
          <Field label="Location" value={c.location} />
          <Field label="Contract Pay" value={c.contractPay} />
        </View>

        {/* Status line with colors */}
        <View style={styles.statusRow}>
          <Text style={[styles.statusText, { color: isEnded ? GREEN : RED }]}>
            {isEnded ? "Ended" : "Ongoing"}
          </Text>

          {/* Give Feedback button with padlock when locked */}
          <TouchableOpacity
            activeOpacity={canOpenForm ? 0.85 : 1}
            disabled={!canOpenForm}
            onPress={() => setOpenForm((p) => ({ ...p, [c.id]: !p[c.id] }))}
            style={[
              styles.feedbackBtn,
              { backgroundColor: isEnded ? GREEN : RED },
              !canOpenForm && { opacity: 0.8 },
            ]}
          >
            <View style={styles.btnContent}>
              {!canOpenForm && (
                <Ionicons
                  name="lock-closed"
                  size={16}
                  color={WHITE}
                  style={{ marginRight: 6 }}
                />
              )}
              <Text style={styles.feedbackBtnText}>Give Feedback</Text>
            </View>
          </TouchableOpacity>
        </View>

        {/* Visibility rule */}
        {bothSubmitted ? (
          <>
            <Text style={styles.sectionTitle}>Published Feedback</Text>
            <View style={styles.pubRow}>
              <StarsStatic value={c.ratingPublic || 0} />
              <Text style={styles.pubNote}>Visible (both submitted)</Text>
            </View>
            {c.tagsPublic.length > 0 ? (
              <View style={styles.tagsWrap}>
                {c.tagsPublic.map((t) => (
                  <View key={t} style={styles.tagChip}>
                    <Text style={styles.tagText}>{t}</Text>
                  </View>
                ))}
              </View>
            ) : null}
            <Text style={styles.privateNote}>
              Review: Private to system (not displayed)
            </Text>
          </>
        ) : (
          <>
            <Text style={styles.sectionTitle}>Feedback</Text>
            <View style={styles.pubRow}>
              <Ionicons name="lock-closed-outline" size={16} color={MUTED} />
              <Text style={styles.lockText}>
                Hidden until both parties submit (double-blind)
              </Text>
            </View>
          </>
        )}

        {/* Form (only toggles open; inputs disabled if not allowed) */}
        {formOpen && (
          <View style={styles.formWrap}>
            <Text style={styles.formLabel}>Rating</Text>
            <StarsPicker
              value={c.myDraft.rating}
              onChange={(v) => updateDraft(c.id, { rating: v })}
              disabled={!canOpenForm}
            />

            <Text style={[styles.formLabel, { marginTop: 12 }]}>
              Tags (stickers)
            </Text>
            <View style={styles.tagsWrap}>
              {TAG_OPTIONS.map((t) => {
                const active = c.myDraft.tags.includes(t);
                return (
                  <TouchableOpacity
                    key={t}
                    onPress={() => toggleTag(c, t, !canOpenForm ? true : false)}
                    activeOpacity={canOpenForm ? 0.85 : 1}
                    style={[
                      styles.tagChip,
                      active && styles.tagChipActive,
                      !canOpenForm && { opacity: 0.5 },
                    ]}
                  >
                    <Text
                      style={[
                        styles.tagText,
                        active && styles.tagTextActive,
                      ]}
                    >
                      {t}
                    </Text>
                  </TouchableOpacity>
                );
              })}
            </View>

            <Text style={[styles.formLabel, { marginTop: 12 }]}>
              Review (private to system)
            </Text>
            <TextInput
              placeholder="Write a short private review…"
              placeholderTextColor="#9AA0A6"
              value={c.myDraft.review}
              onChangeText={(txt) => updateDraft(c.id, { review: txt })}
              style={[
                styles.input,
                styles.inputMultiline,
                !canOpenForm && styles.inputDisabled,
              ]}
              editable={canOpenForm}
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />

            <Text style={styles.warning}>
              ⚠️ Feedback can only be submitted once and cannot be changed.
            </Text>

            <TouchableOpacity
              activeOpacity={canOpenForm ? 0.9 : 1}
              onPress={() => submitFeedback(c)}
              style={[
                styles.submitBtn,
                { backgroundColor: canOpenForm ? YELLOW : "#CCCCCC" },
                !canOpenForm && { borderColor: "#CCCCCC" },
              ]}
              disabled={!canOpenForm}
            >
              <Text style={styles.submitBtnText}>Submit</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar (consistent UI) */}
      <View style={styles.topBar}>
        <Text style={styles.topBarTitle}>Mini Contractee</Text>
      </View>
      <View style={styles.topAccent} />

      <KeyboardAvoidingView
        style={{ flex: 1 }}
        behavior={Platform.OS === "ios" ? "padding" : "height"}
      >
        <FlatList
          data={contracts}
          keyExtractor={(it) => it.id}
          renderItem={renderItem}
          contentContainerStyle={{ paddingBottom: 120 }}
          keyboardShouldPersistTaps="handled"
        />
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

/* ------------ Small Field block ------------ */
function Field({ label, value }) {
  return (
    <View style={{ flex: 1 }}>
      <Text style={styles.fieldLabel}>{label}</Text>
      <Text style={styles.fieldValue}>{value}</Text>
    </View>
  );
}

/* --------------- Styles --------------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  topBar: {
    backgroundColor: BLACK,
    height: 70,
    alignItems: "center",
    justifyContent: "flex-end",
    paddingBottom: 12,
  },
  topBarTitle: { color: WHITE, fontSize: 20, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  card: {
    margin: 14,
    padding: 14,
    borderRadius: 14,
    backgroundColor: WHITE,
    borderWidth: 1.5,
    borderColor: BDR,
    shadowColor: "#000",
    shadowOpacity: 0.05,
    shadowRadius: 6,
    shadowOffset: { width: 0, height: 3 },
    elevation: 2,
  },
  title: { fontSize: 17, fontWeight: "800", color: BLACK, marginBottom: 6 },

  fieldLabel: { fontSize: 12, color: MUTED, marginBottom: 2, fontWeight: "700" },
  fieldValue: { fontSize: 14, color: "#222" },

  row: { flexDirection: "row", gap: 10, marginTop: 6 },

  statusRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginTop: 10,
  },
  statusText: { fontWeight: "900" },

  feedbackBtn: {
    borderRadius: 10,
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  btnContent: { flexDirection: "row", alignItems: "center" },
  feedbackBtnText: { color: WHITE, fontWeight: "900" },

  sectionTitle: { marginTop: 12, fontSize: 13, fontWeight: "900", color: BLACK },

  pubRow: { flexDirection: "row", alignItems: "center", gap: 8, marginTop: 6 },
  pubNote: { fontSize: 12, color: MUTED, fontWeight: "700" },
  lockText: { fontSize: 12, color: MUTED, fontWeight: "700" },
  privateNote: { marginTop: 6, fontSize: 12, color: MUTED, fontStyle: "italic" },

  formWrap: {
    marginTop: 10,
    padding: 12,
    borderRadius: 12,
    borderWidth: 1.5,
    borderColor: "#E5E5E5",
    backgroundColor: "#FAFAFA",
  },
  formLabel: { fontWeight: "800", color: BLACK, marginBottom: 6 },

  tagsWrap: { flexDirection: "row", flexWrap: "wrap", gap: 8, marginTop: 4 },
  tagChip: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 999,
    paddingHorizontal: 10,
    paddingVertical: 6,
    backgroundColor: WHITE,
  },
  tagChipActive: { backgroundColor: YELLOW, borderColor: YELLOW },
  tagText: { fontSize: 12, fontWeight: "800", color: BLACK },
  tagTextActive: { color: BLACK },

  input: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 10,
    backgroundColor: WHITE,
    color: BLACK,
  },
  inputMultiline: { minHeight: 90 },
  inputDisabled: { opacity: 0.5 },

  warning: {
    marginTop: 10,
    fontSize: 12,
    color: "#B91C1C",
    fontWeight: "700",
    textAlign: "center",
  },
  submitBtn: {
    marginTop: 12,
    borderRadius: 10,
    paddingVertical: 10,
    alignItems: "center",
    borderWidth: 2,
    borderColor: BLACK,
  },
  submitBtnText: { fontWeight: "900", color: BLACK },
});

