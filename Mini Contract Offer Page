// MiniContractPage.js
import React, { useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  Alert,
  KeyboardAvoidingView,
  ScrollView,
  Platform,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const BLACK = "#000";
const WHITE = "#FFF";
const YELLOW = "#FFD54A";

export default function MiniContractPage() {
  const [title, setTitle] = useState("");
  const [role, setRole] = useState("");
  const [nature, setNature] = useState("");
  const [extra, setExtra] = useState("");
  const [count, setCount] = useState("");
  const [location, setLocation] = useState("");
  const [pay, setPay] = useState("");

  // NEW: Project Type + conditional fields
  const [projectType, setProjectType] = useState(""); // "duration" | "value"
  const [duration, setDuration] = useState("");       // for "duration" type -> "how many days or weeks"
  const [deliverable, setDeliverable] = useState(""); // for "value" type -> "what should be done"

  const handlePost = () => {
    // base required
    if (!title || !role || !nature || !count || !pay) {
      Alert.alert("Error", "Please fill all required fields (Title, Role, Nature, People, Pay).");
      return;
    }
    // require project type and respective field
    if (!projectType) {
      Alert.alert("Error", "Please select a Project Type (Duration or Value).");
      return;
    }
    if (projectType === "duration" && !duration.trim()) {
      Alert.alert("Error", "Please specify how many days or weeks for the Duration project.");
      return;
    }
    if (projectType === "value" && !deliverable.trim()) {
      Alert.alert("Error", "Please specify what should be done for the Value project.");
      return;
    }

    const summary =
      `Title: ${title}\n` +
      `Role: ${role}\n` +
      `Nature: ${nature}\n` +
      `Extra: ${extra}\n` +
      `People: ${count}\n` +
      `Project Type: ${projectType === "duration" ? "Duration" : "Value"}\n` +
      (projectType === "duration" ? `Duration: ${duration}\n` : `Deliverable: ${deliverable}\n`) +
      `Location: ${location}\n` +
      `Pay: ${pay}`;

    Alert.alert("Mini Contract Created", summary);
  };

  const handlePreview = () => {
    const preview =
      `üìå ${title || "(no title)"}\n` +
      `üë∑ Role: ${role || "‚Äî"}\n` +
      `üõ† Nature: ${nature || "‚Äî"}\n` +
      `üìù Notes: ${extra || "‚Äî"}\n` +
      `üë• Needed: ${count || "‚Äî"}\n` +
      `ü™™ Project Type: ${projectType ? (projectType === "duration" ? "Duration" : "Value") : "‚Äî"}\n` +
      (projectType === "duration"
        ? `‚è≥ Duration: ${duration || "‚Äî"}\n`
        : projectType === "value"
        ? `üì¶ Deliverable: ${deliverable || "‚Äî"}\n`
        : "") +
      `üìç Location: ${location || "‚Äî"}\n` +
      `üí∞ Pay: ${pay || "‚Äî"}`;

    Alert.alert("Preview Contract", preview);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.iconBox} activeOpacity={0.7}>
          <Ionicons name="chevron-back" size={24} color={WHITE} />
        </TouchableOpacity>
        <Text style={styles.topTitle}>Mini Contract</Text>
        <View style={styles.iconBox} />
      </View>
      <View style={styles.topAccent} />

      {/* Preview Button */}
      <View style={styles.previewWrap}>
        <TouchableOpacity style={styles.previewBtn} onPress={handlePreview} activeOpacity={0.8}>
          <Ionicons name="eye-outline" size={20} color={BLACK} />
          <Text style={styles.previewText}>Preview</Text>
        </TouchableOpacity>
      </View>

      {/* KeyboardAvoidingView fixes the overlap issue */}
      <KeyboardAvoidingView
        style={{ flex: 1 }}
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        keyboardVerticalOffset={Platform.OS === "ios" ? 90 : 80}
      >
        <ScrollView contentContainerStyle={styles.form}>
          <Field label="Job Title" placeholder="e.g. Build my house" value={title} onChangeText={setTitle} />
          <Field label="Role" placeholder="e.g. Bricklayer" value={role} onChangeText={setRole} />
          <Field label="Nature of Job" placeholder="e.g. Building foundation walls" value={nature} onChangeText={setNature} />
          <Field label="Extra Notes / Details" placeholder="Optional extra info" value={extra} onChangeText={setExtra} multiline />
          <Field label="Number of People Needed" placeholder="e.g. 4" value={count} onChangeText={setCount} keyboardType="numeric" />

          {/* NEW: Project Type selector */}
          <View style={styles.fieldWrap}>
            <Text style={styles.fieldLabel}>Project Type</Text>
            <View style={styles.typeRow}>
              <TouchableOpacity
                activeOpacity={0.9}
                style={[styles.typePill, projectType === "duration" && styles.typePillOn]}
                onPress={() => setProjectType("duration")}
              >
                <Text style={[styles.typePillTxt, projectType === "duration" && styles.typePillTxtOn]}>
                  Duration
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                activeOpacity={0.9}
                style={[styles.typePill, projectType === "value" && styles.typePillOn]}
                onPress={() => setProjectType("value")}
              >
                <Text style={[styles.typePillTxt, projectType === "value" && styles.typePillTxtOn]}>
                  Value
                </Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Conditional field based on Project Type */}
          {projectType === "duration" && (
            <Field
              label="How many days or weeks?"
              placeholder="e.g. 2 weeks"
              value={duration}
              onChangeText={setDuration}
            />
          )}
          {projectType === "value" && (
            <Field
              label="What should be done?"
              placeholder="e.g. Paint a 3-bedroom flat"
              value={deliverable}
              onChangeText={setDeliverable}
              multiline
            />
          )}

          <Field label="Location" placeholder="e.g. Lagos, Nigeria" value={location} onChangeText={setLocation} />
          <Field label="Amount of Pay" placeholder="e.g. ‚Ç¶50,000" value={pay} onChangeText={setPay} keyboardType="numeric" />

          <TouchableOpacity style={styles.postBtn} onPress={handlePost} activeOpacity={0.85}>
            <Ionicons name="briefcase-outline" size={20} color={BLACK} />
            <Text style={styles.postText}>Post Contract</Text>
          </TouchableOpacity>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

/* Reusable field */
function Field({ label, ...props }) {
  return (
    <View style={styles.fieldWrap}>
      <Text style={styles.fieldLabel}>{label}</Text>
      <TextInput style={styles.fieldInput} {...props} placeholderTextColor="#777" />
    </View>
  );
}

/* Styles */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? StatusBar.currentHeight || 0 : 12,
    paddingHorizontal: 12,
    paddingBottom: 12,
    flexDirection: "row",
    alignItems: "flex-end",
    justifyContent: "space-between",
  },
  iconBox: { width: 40, height: 36, justifyContent: "center" },
  topTitle: { color: WHITE, fontSize: 22, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  previewWrap: { alignItems: "flex-end", marginTop: 8, marginRight: 16 },
  previewBtn: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: YELLOW,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: BLACK,
  },
  previewText: { marginLeft: 4, fontWeight: "700", color: BLACK },

  form: { padding: 16, paddingBottom: 40 },

  fieldWrap: { marginBottom: 16 },
  fieldLabel: { color: BLACK, fontWeight: "700", marginBottom: 6 },
  fieldInput: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 8,
    padding: 10,
    fontSize: 15,
    backgroundColor: WHITE,
    color: BLACK,
  },

  // NEW: project type pills
  typeRow: { flexDirection: "row", gap: 10 },
  typePill: {
    flex: 1,
    paddingVertical: 10,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
    alignItems: "center",
    justifyContent: "center",
  },
  typePillOn: {
    backgroundColor: YELLOW,
  },
  typePillTxt: {
    fontWeight: "900",
    color: BLACK,
  },
  typePillTxtOn: {
    color: BLACK,
  },

  postBtn: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: YELLOW,
    paddingVertical: 14,
    borderRadius: 10,
    marginTop: 10,
    borderWidth: 2,
    borderColor: BLACK,
  },
  postText: { marginLeft: 6, fontWeight: "900", fontSize: 16, color: BLACK },
});
