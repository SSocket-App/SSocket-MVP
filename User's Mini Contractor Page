// MiniContractorPage.js — Create Contract + Contractors (Active/Queue) with Feedback system
import React, { useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
  ScrollView,
  TextInput,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const YELLOW = "#FFD54A";
const BLACK = "#000";
const WHITE = "#FFF";
const MUTED = "#6B7280";
const BDR = "#E5E7EB";
const GREEN = "#22C55E";
const RED = "#EF4444";

/* ---------- Tag lists (match MiniContractStats) ---------- */
const GREEN_TAGS = [
  "diplomatic","sharp","punctuality","speed","perfection","quality","reliability","communication",
  "teamspirit","flexibility","trust","peaceful","proactive","strategic","polite","prudent",
  "leader","problem-solving"
];
const RED_TAGS = [
  "lateness","unprofessional","conflict","unreliable","dishonesty","wasteful",
  "unexperienced","disorganized","rigid","slow"
];

/* ---------- DATA (Contractors side) ---------- */
/* Active contracts (show exact pay; some Ongoing, some Ended) */
const INITIAL_ACTIVE = [
  {
    id: "k1",
    title: "Roof Installation (3 workers)",
    counterparty: "👤 Contractor: Peter Obi",
    contractPay: "₦250,000",
    status: "ended", // ended -> feedback allowed (green)
    startDate: "2025-08-01",
    endDate: "2025-08-05",
    location: "Onitsha, Nigeria",
  },
  {
    id: "k2",
    title: "Mobile App Backend Setup",
    counterparty: "👤 Contractor: Jane Smith",
    contractPay: "₦320,000",
    status: "ongoing", // ongoing -> locked (red + padlock)
    startDate: "2025-08-06",
    endDate: "2025-08-20",
    location: "Remote",
  },
  {
    id: "k3",
    title: "Lobby Tiling",
    counterparty: "👤 Contractor: Uche Mark",
    contractPay: "₦200,000",
    status: "ongoing",
    startDate: "2025-08-10",
    endDate: "2025-08-18",
    location: "Ikeja, Lagos",
  },
];

const CONTRACTORS_QUEUE_GROUPED = [
  {
    contractId: "qC1",
    title: "House Painting (Duplex)",
    applicants: [
      { id: "a1", name: "Chinedu Okeke", role: "Painter", expectedPay: "₦150,000 – ₦220,000", appliedAgo: "2h" },
      { id: "a2", name: "Blessing Yaro", role: "Painter", expectedPay: "₦160,000 – ₦230,000", appliedAgo: "6h" },
    ],
  },
  {
    contractId: "qC2",
    title: "E-commerce API Integration",
    applicants: [
      { id: "a3", name: "Adaobi N.", role: "Backend Dev", expectedPay: "₦280,000 – ₦380,000", appliedAgo: "1h" },
      { id: "a4", name: "Samuel Eze", role: "Backend Dev", expectedPay: "₦250,000 – ₦350,000", appliedAgo: "3h" },
      { id: "a5", name: "Ibrahim Musa", role: "Fullstack", expectedPay: "₦300,000 – ₦420,000", appliedAgo: "1d" },
    ],
  },
];

export default function MiniContractorPage() {
  // Tabs: create | contractors
  const [activeTab, setActiveTab] = useState("create");
  // Contractors sub-tabs: active | queue
  const [contractorView, setContractorView] = useState("active");

  /* ---------- Create Contract form state ---------- */
  const [form, setForm] = useState({
    title: "",
    roles: "",
    nature: "",
    details: "",
    location: "",
    contractPay: "",
    // Type toggle + project description
    contractType: "duration", // 'duration' | 'project'
    startDate: "",
    endDate: "",
    perProject: "", // used when contractType === 'project'
  });
  const setF = (k, v) => setForm((p) => ({ ...p, [k]: v }));

  /* ---------- Active list + Feedback state ---------- */
  const [activeContracts, setActiveContracts] = useState(INITIAL_ACTIVE);
  const [openFeedback, setOpenFeedback] = useState({}); // { [id]: boolean }
  const [submittedFeedback, setSubmittedFeedback] = useState({}); // { [id]: true }

  const [drafts, setDrafts] = useState(() =>
    Object.fromEntries(
      INITIAL_ACTIVE.map((c) => [
        c.id,
        {
          satisfactionRating: 0,
          customerServiceRating: 0,
          greenTags: [],
          redTags: [],
          review: "",
        },
      ])
    )
  );

  const toggleFeedback = (id, canOpen) => {
    if (!canOpen) return;
    if (submittedFeedback[id]) return; // one-time
    setOpenFeedback((p) => ({ ...p, [id]: !p[id] }));
  };

  const updateDraft = (id, patch) =>
    setDrafts((p) => ({ ...p, [id]: { ...p[id], ...patch } }));

  const toggleChip = (id, key, tag) => {
    const prev = drafts[id]?.[key] || [];
    const next = prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag];
    updateDraft(id, { [key]: next });
  };

  const submitFeedback = (id) => {
    const d = drafts[id] || {};
    if (!d.satisfactionRating || !d.customerServiceRating) {
      return Alert.alert("Missing ratings", "Please set both Satisfaction and Customer Service ratings (1–5).");
    }
    const payload = {
      contractId: id,
      satisfactionRating: d.satisfactionRating,
      customerServiceRating: d.customerServiceRating,
      greenTags: d.greenTags,
      redTags: d.redTags,
      privateReview: d.review?.trim() ?? "",
    };
    console.log("MINI_CONTRACTOR_FEEDBACK_SUBMIT", payload);

    setSubmittedFeedback((p) => ({ ...p, [id]: true }));
    setOpenFeedback((p) => ({ ...p, [id]: false }));
    Alert.alert("Feedback submitted", "Hidden until both parties submit (double-blind).");
  };

  const onCreateContract = () => {
    const {
      title, roles, nature, details, startDate, endDate,
      location, contractPay, contractType, perProject
    } = form;

    if (!title || !roles || !nature || !location || !contractPay) {
      Alert.alert("Missing info", "Please fill all required fields.");
      return;
    }

    if (contractType === "duration") {
      if (!startDate || !endDate) {
        Alert.alert("Missing dates", "Provide Start and End dates for duration contracts.");
        return;
      }
    } else {
      if (!perProject) {
        Alert.alert("Missing details", "Provide what should be done for project contracts.");
        return;
      }
    }

    Alert.alert(
      "Contract Created",
      `${title}\n${roles}\n${location}\n${contractPay}\nType: ${contractType.toUpperCase()}\n${
        contractType === "duration" ? `${startDate} - ${endDate}` : `What: ${perProject}`
      }`
    );

    setForm((p) => ({
      ...p,
      title: "",
      roles: "",
      nature: "",
      details: "",
      startDate: "",
      endDate: "",
      perProject: "",
      location: "",
      contractPay: "",
      contractType: p.contractType, // keep last chosen type
    }));
  };

  /* ---------- RENDERERS ---------- */
  const renderActiveCard = ({ item: c }) => {
    const isEnded = c.status === "ended";
    const isOpen = !!openFeedback[c.id];
    const isSubmitted = !!submittedFeedback[c.id];
    const draft = drafts[c.id] || {
      satisfactionRating: 0,
      customerServiceRating: 0,
      greenTags: [],
      redTags: [],
      review: "",
    };

    return (
      <View style={styles.card}>
        <Text style={styles.title}>{c.title}</Text>
        <Text style={styles.counterparty}>{c.counterparty}</Text>

        <View style={styles.row}>
          <Field label="Start" value={c.startDate} />
          <Field label="End" value={c.endDate} />
        </View>
        <View style={styles.row}>
          <Field label="Location" value={c.location} />
          <Field label="Contract Pay" value={c.contractPay} />
        </View>

        {/* Status + Give Feedback */}
        <View style={styles.statusRow}>
          <View style={styles.leftStatus}>
            <Text style={[styles.statusTxt, { color: isEnded ? GREEN : RED }]}>
              {isEnded ? "Ended" : "Ongoing"}
            </Text>
            <View style={[styles.badge, isEnded ? styles.badgeGreen : styles.badgeRed]}>
              <Text style={styles.badgeText}>{isEnded ? "ENDED" : "ONGOING"}</Text>
            </View>
          </View>

          <TouchableOpacity
            activeOpacity={isEnded && !isSubmitted ? 0.9 : 1}
            disabled={!isEnded || isSubmitted}
            onPress={() => toggleFeedback(c.id, isEnded && !isSubmitted)}
            style={[
              styles.fbBtn,
              { backgroundColor: isEnded && !isSubmitted ? GREEN : RED },
              (!isEnded || isSubmitted) && { opacity: 0.9 },
            ]}
          >
            <View style={styles.btnContent}>
              {(!isEnded || isSubmitted) && (
                <Ionicons name="lock-closed" size={16} color={WHITE} style={{ marginRight: 6 }} />
              )}
              <Text style={styles.fbBtnText}>Give Feedback</Text>
              {isEnded && !isSubmitted && (
                <Ionicons
                  name={isOpen ? "chevron-up" : "chevron-down"}
                  size={16}
                  color={WHITE}
                  style={{ marginLeft: 6 }}
                />
              )}
            </View>
          </TouchableOpacity>
        </View>

        {/* Double-blind note */}
        <View style={styles.blindRow}>
          <Ionicons name="lock-closed-outline" size={14} color={MUTED} />
          <Text style={styles.blindTxt}>  Hidden until both parties submit (double-blind)</Text>
        </View>

        {/* Feedback dropdown */}
        {isEnded && isOpen && !isSubmitted && (
          <View style={styles.feedbackWrap}>
            <Text style={styles.formLabel}>Satisfaction Rating</Text>
            <View style={styles.starRow}>
              <StarsPicker
                value={draft.satisfactionRating}
                onChange={(v) => updateDraft(c.id, { satisfactionRating: v })}
                disabled={false}
              />
              <Text style={styles.starNum}>{(draft.satisfactionRating || 0).toFixed(1)}★</Text>
            </View>

            <Text style={[styles.formLabel, { marginTop: 12 }]}>Customer Service Rating</Text>
            <View style={styles.starRow}>
              <StarsPicker
                value={draft.customerServiceRating}
                onChange={(v) => updateDraft(c.id, { customerServiceRating: v })}
                disabled={false}
              />
              <Text style={styles.starNum}>{(draft.customerServiceRating || 0).toFixed(1)}★</Text>
            </View>

            <Text style={[styles.formLabel, { marginTop: 12 }]}>Green Tags (Strengths)</Text>
            <View style={styles.tagsWrap}>
              {GREEN_TAGS.map((t) => {
                const active = draft.greenTags.includes(t);
                return (
                  <TouchableOpacity
                    key={t}
                    onPress={() => toggleChip(c.id, "greenTags", t)}
                    activeOpacity={0.85}
                    style={[styles.tagChip, active && styles.tagChipActive]}
                  >
                    <Text style={[styles.tagText, active && styles.tagTextActive]}>{t}</Text>
                  </TouchableOpacity>
                );
              })}
            </View>

            <Text style={[styles.formLabel, { marginTop: 12 }]}>Red Tags (Risks)</Text>
            <View style={styles.tagsWrap}>
              {RED_TAGS.map((t) => {
                const active = draft.redTags.includes(t);
                return (
                  <TouchableOpacity
                    key={t}
                    onPress={() => toggleChip(c.id, "redTags", t)}
                    activeOpacity={0.85}
                    style={[styles.tagChip, active && styles.tagChipActive]}
                  >
                    <Text style={[styles.tagText, active && styles.tagTextActive]}>{t}</Text>
                  </TouchableOpacity>
                );
              })}
            </View>

            <Text style={[styles.formLabel, { marginTop: 12 }]}>
              Review <Text style={{ color: MUTED }}>(private to system)</Text>
            </Text>
            <TextInput
              placeholder="Write a short review…"
              placeholderTextColor="#9AA0A6"
              value={draft.review}
              onChangeText={(txt) => updateDraft(c.id, { review: txt })}
              style={[styles.input, styles.inputMultiline]}
              multiline
              numberOfLines={4}
              textAlignVertical="top"
            />
            <Text style={styles.privateNote}>🔒 Reviews are private and only visible to the system.</Text>

            <Text style={styles.warning}>⚠️ Feedback can only be submitted once.</Text>

            <TouchableOpacity activeOpacity={0.9} onPress={() => submitFeedback(c.id)} style={styles.submitBtn}>
              <Text style={styles.submitBtnText}>Submit</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    );
  };

  const renderQueueGroup = ({ item: group }) => (
    <View style={styles.card}>
      <Text style={styles.title}>{group.title}</Text>
      <Text style={[styles.counterparty, { marginBottom: 10 }]}>Applicants Queue</Text>

      {group.applicants.map((a) => (
        <View key={a.id} style={styles.applicantRow}>
          <View style={styles.avatar}>
            <View style={styles.avatarHead} />
            <View style={styles.avatarBody} />
          </View>

          <View style={{ flex: 1 }}>
            <Text style={styles.applicantName}>{a.name}</Text>
            <Text style={styles.applicantMeta}>
              {a.role}  •  {a.expectedPay}  •  ⏱ {a.appliedAgo} ago
            </Text>
          </View>

          {/* "View" button per earlier change */}
          <TouchableOpacity style={styles.pickButton}>
            <Text style={styles.pickText}>View</Text>
          </TouchableOpacity>
        </View>
      ))}

      {group.applicants.length === 0 && <Text style={styles.emptyText}>No applicants yet.</Text>}
    </View>
  );

  /* ---------- UI ---------- */
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.iconBox} activeOpacity={0.7}>
          <Ionicons name="chevron-back" size={24} color={WHITE} />
        </TouchableOpacity>
        <Text style={styles.topTitle}>Mini Contractor</Text>
        <View style={styles.iconBox} />
      </View>
      <View style={styles.topAccent} />

      {/* Tabs */}
      <View style={styles.tabRow}>
        <TouchableOpacity
          style={[styles.tab, activeTab === "create" && styles.tabActive]}
          onPress={() => setActiveTab("create")}
        >
          <Text style={[styles.tabText, activeTab === "create" && styles.tabTextActive]}>Create Contract</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.tab, activeTab === "contractors" && styles.tabActive]}
          onPress={() => setActiveTab("contractors")}
        >
          <Text style={[styles.tabText, activeTab === "contractors" && styles.tabTextActive]}>Contractors</Text>
        </TouchableOpacity>
      </View>

      {/* CONTENT */}
      {activeTab === "create" ? (
        <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === "ios" ? "padding" : "height"}>
          <ScrollView contentContainerStyle={{ paddingBottom: 24 }}>
            <View style={styles.formCard}>
              <FormRow label="Job Title">
                <TextInput
                  placeholder="e.g., Roof Installation"
                  placeholderTextColor="#999"
                  value={form.title}
                  onChangeText={(t) => setF("title", t)}
                  style={styles.input}
                />
              </FormRow>

              <FormRow label="Roles">
                <TextInput
                  placeholder="e.g., Mason, Painter, Supervisor"
                  placeholderTextColor="#999"
                  value={form.roles}
                  onChangeText={(t) => setF("roles", t)}
                  style={styles.input}
                />
              </FormRow>

              <FormRow label="Nature of Job">
                <TextInput
                  placeholder="e.g., Onsite / Weekend / Night shift"
                  placeholderTextColor="#999"
                  value={form.nature}
                  onChangeText={(t) => setF("nature", t)}
                  style={styles.input}
                />
              </FormRow>

              <FormRow label="Extra Notes / Details">
                <TextInput
                  placeholder="Any extra instructions…"
                  placeholderTextColor="#999"
                  value={form.details}
                  onChangeText={(t) => setF("details", t)}
                  style={[styles.input, { height: 90, textAlignVertical: "top" }]}
                  multiline
                />
              </FormRow>

              {/* ======== Type selector ======== */}
              <FormRow label="Contract Type">
                <View style={styles.typeRow}>
                  <TouchableOpacity
                    onPress={() => setF("contractType", "duration")}
                    activeOpacity={0.9}
                    style={[
                      styles.typeBtn,
                      form.contractType === "duration" && styles.typeBtnActive,
                    ]}
                  >
                    <Text
                      style={[
                        styles.typeTxt,
                        form.contractType === "duration" && styles.typeTxtActive,
                      ]}
                    >
                      Duration
                    </Text>
                  </TouchableOpacity>

                  <TouchableOpacity
                    onPress={() => setF("contractType", "project")}
                    activeOpacity={0.9}
                    style={[
                      styles.typeBtn,
                      form.contractType === "project" && styles.typeBtnActive,
                    ]}
                  >
                    <Text
                      style={[
                        styles.typeTxt,
                        form.contractType === "project" && styles.typeTxtActive,
                      ]}
                    >
                      Project
                    </Text>
                  </TouchableOpacity>
                </View>
              </FormRow>

              {/* ======== Conditional inputs under the box ======== */}
              {form.contractType === "duration" ? (
                <View style={styles.row}>
                  <Half label="Start Date">
                    <TextInput
                      placeholder="YYYY-MM-DD"
                      placeholderTextColor="#999"
                      value={form.startDate}
                      onChangeText={(t) => setF("startDate", t)}
                      style={styles.input}
                    />
                  </Half>
                  <Half label="End Date">
                    <TextInput
                      placeholder="YYYY-MM-DD"
                      placeholderTextColor="#999"
                      value={form.endDate}
                      onChangeText={(t) => setF("endDate", t)}
                      style={styles.input}
                    />
                  </Half>
                </View>
              ) : (
                <FormRow label="What should be done">
                  <TextInput
                    placeholder="e.g., Paint this room / Repair these cars"
                    placeholderTextColor="#999"
                    value={form.perProject}
                    onChangeText={(t) => setF("perProject", t)}
                    style={styles.input}
                  />
                </FormRow>
              )}

              <FormRow label="Location">
                <TextInput
                  placeholder="e.g., Lagos, Nigeria"
                  placeholderTextColor="#999"
                  value={form.location}
                  onChangeText={(t) => setF("location", t)}
                  style={styles.input}
                />
              </FormRow>

              <FormRow label="Contract Pay">
                <TextInput
                  placeholder="e.g., ₦300,000"
                  placeholderTextColor="#999"
                  value={form.contractPay}
                  onChangeText={(t) => setF("contractPay", t)}
                  style={styles.input}
                  keyboardType="numeric"
                />
              </FormRow>

              <TouchableOpacity activeOpacity={0.9} style={styles.submitBtn} onPress={onCreateContract}>
                <Text style={styles.submitText}>Create Contract</Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </KeyboardAvoidingView>
      ) : (
        <>
          {/* Contractors sub-tabs */}
          <View style={styles.subTabRow}>
            <TouchableOpacity
              style={[styles.subTab, contractorView === "active" && styles.subTabActive]}
              onPress={() => setContractorView("active")}
            >
              <Text style={[styles.subTabText, contractorView === "active" && styles.subTabTextActive]}>
                Active Contracts
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.subTab, contractorView === "queue" && styles.subTabActive]}
              onPress={() => setContractorView("queue")}
            >
              <Text style={[styles.subTabText, contractorView === "queue" && styles.subTabTextActive]}>
                Queued Contracts
              </Text>
            </TouchableOpacity>
          </View>

          {contractorView === "active" ? (
            <FlatList
              data={activeContracts}
              keyExtractor={(item) => item.id}
              contentContainerStyle={{ paddingBottom: 20 }}
              showsVerticalScrollIndicator={false}
              ItemSeparatorComponent={() => <View style={styles.sep} />}
              renderItem={renderActiveCard}
            />
          ) : (
            <FlatList
              data={CONTRACTORS_QUEUE_GROUPED}
              keyExtractor={(group) => group.contractId}
              contentContainerStyle={{ paddingBottom: 20 }}
              showsVerticalScrollIndicator={false}
              ItemSeparatorComponent={() => <View style={styles.sep} />}
              renderItem={renderQueueGroup}
            />
          )}
        </>
      )}
    </SafeAreaView>
  );
}

/* ---------- Small UI ---------- */
function FormRow({ label, children }) {
  return (
    <View style={styles.formRow}>
      <Text style={styles.formLabel}>{label}</Text>
      {children}
    </View>
  );
}

function Half({ label, children }) {
  return (
    <View style={{ flex: 1 }}>
      <Text style={styles.formLabel}>{label}</Text>
      {children}
    </View>
  );
}

function Field({ label, value }) {
  return (
    <View style={{ flex: 1 }}>
      <Text style={styles.fieldLabel}>{label}</Text>
      <Text style={styles.fieldValue}>{value}</Text>
    </View>
  );
}

function StarsPicker({ value, onChange, disabled }) {
  return (
    <View style={{ flexDirection: "row" }}>
      {[1, 2, 3, 4, 5].map((i) => (
        <TouchableOpacity
          key={i}
          disabled={disabled}
          onPress={() => !disabled && onChange(i)}
          activeOpacity={disabled ? 1 : 0.7}
        >
          <Ionicons
            name={i <= value ? "star" : "star-outline"}
            size={24}
            color={disabled ? "#CCC" : "#111"}
          />
        </TouchableOpacity>
      ))}
    </View>
  );
}

/* ---------- Styles ---------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    paddingHorizontal: 12,
    paddingBottom: 12,
    flexDirection: "row",
    alignItems: "flex-end",
    justifyContent: "space-between",
  },
  iconBox: { width: 40, height: 36, justifyContent: "center" },
  topTitle: { color: WHITE, fontSize: 22, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  tabRow: {
    flexDirection: "row",
    gap: 10,
    marginTop: 10,
    paddingHorizontal: 16,
  },
  tab: {
    flex: 1,
    paddingVertical: 10,
    borderBottomWidth: 2,
    borderColor: "transparent",
    alignItems: "center",
  },
  tabActive: { borderColor: BLACK },
  tabText: { fontSize: 16, fontWeight: "700", color: "#666" },
  tabTextActive: { color: BLACK, fontWeight: "900" },

  /* Create Contract */
  formCard: {
    marginHorizontal: 16,
    marginTop: 10,
    padding: 14,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
  },
  formRow: { marginBottom: 12 },
  formLabel: { fontSize: 13, fontWeight: "800", color: BLACK, marginBottom: 6 },
  input: {
    height: 44,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingHorizontal: 12,
    backgroundColor: WHITE,
    color: BLACK,
  },

  // contract type selector styles
  typeRow: { flexDirection: "row", gap: 10 },
  typeBtn: {
    flex: 1,
    paddingVertical: 10,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    alignItems: "center",
    backgroundColor: WHITE,
  },
  typeBtnActive: { backgroundColor: "#FFFDF2", borderColor: YELLOW },
  typeTxt: { fontSize: 13, fontWeight: "800", color: BLACK },
  typeTxtActive: { color: BLACK },

  submitBtn: {
    marginTop: 8,
    backgroundColor: YELLOW,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    alignItems: "center",
    paddingVertical: 12,
  },
  submitText: { fontWeight: "900", color: BLACK, fontSize: 15 },

  /* Contractors sub-tabs */
  subTabRow: {
    flexDirection: "row",
    justifyContent: "space-around",
    marginVertical: 10,
    paddingHorizontal: 16,
  },
  subTab: {
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    backgroundColor: "#EEE",
  },
  subTabActive: { backgroundColor: YELLOW },
  subTabText: { fontSize: 14, fontWeight: "700", color: "#555" },
  subTabTextActive: { color: BLACK },

  sep: { height: 1, backgroundColor: "#F0F0F0", marginHorizontal: 16 },

  /* Cards */
  card: {
    marginHorizontal: 16,
    marginTop: 10,
    padding: 14,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
  },
  title: { fontSize: 16, fontWeight: "900", marginBottom: 6, color: BLACK },
  counterparty: { fontSize: 13, fontWeight: "700", color: "#444", marginBottom: 6 },

  row: { flexDirection: "row", gap: 10, marginTop: 4, marginBottom: 6 },
  fieldLabel: { fontSize: 12, color: MUTED, marginBottom: 4, fontWeight: "700" },
  fieldValue: { fontSize: 14, color: "#222" },

  leftStatus: { flexDirection: "row", alignItems: "center", gap: 8 },
  statusRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginTop: 8,
  },
  statusTxt: { fontWeight: "900" },
  badge: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 8,
    paddingHorizontal: 8,
    paddingVertical: 2,
    backgroundColor: WHITE,
  },
  badgeRed: { backgroundColor: "#FFD4D4" },
  badgeGreen: { backgroundColor: "#CFF2C9" },
  badgeText: { fontSize: 11, fontWeight: "900", color: BLACK },

  fbBtn: {
    borderRadius: 10,
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  btnContent: { flexDirection: "row", alignItems: "center" },
  fbBtnText: { color: WHITE, fontWeight: "900" },

  /* Double-blind note */
  blindRow: { flexDirection: "row", alignItems: "center", marginTop: 8 },
  blindTxt: { color: MUTED, fontSize: 12, fontWeight: "600" },

  /* Feedback dropdown */
  feedbackWrap: {
    marginTop: 10,
    padding: 12,
    borderRadius: 12,
    borderWidth: 1.5,
    borderColor: "#E5E5E5",
    backgroundColor: "#FAFAFA",
  },
  starRow: { flexDirection: "row", alignItems: "center", gap: 8 },
  starNum: { fontSize: 14, fontWeight: "900", color: BLACK },

  tagsWrap: { flexDirection: "row", flexWrap: "wrap", gap: 8, marginTop: 4 },
  tagChip: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 999,
    paddingHorizontal: 10,
    paddingVertical: 6,
    backgroundColor: WHITE,
  },
  tagChipActive: { backgroundColor: YELLOW, borderColor: YELLOW },
  tagText: { fontSize: 12, fontWeight: "800", color: BLACK },
  tagTextActive: { color: BLACK },

  privateNote: { marginTop: 6, fontSize: 12, color: MUTED, fontStyle: "italic" },

  warning: {
    marginTop: 10,
    fontSize: 12,
    color: "#B91C1C",
    fontWeight: "700",
    textAlign: "center",
  },

  submitBtn: {
    marginTop: 12,
    borderRadius: 10,
    paddingVertical: 10,
    alignItems: "center",
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: YELLOW,
  },
  submitBtnText: { fontWeight: "900", color: BLACK },

  /* Queue rows */
  applicantRow: {
    flexDirection: "row",
    alignItems: "center",
    gap: 10,
    paddingVertical: 8,
    borderTopWidth: 1,
    borderColor: "#F1F1F1",
  },
  avatar: {
    width: 40, height: 40, borderRadius: 20,
    borderWidth: 2, borderColor: BLACK,
    alignItems: "center", justifyContent: "center",
    backgroundColor: WHITE,
  },
  avatarHead: {
    width: 10, height: 10, borderRadius: 5,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE, marginBottom: 2,
  },
  avatarBody: {
    width: 18, height: 8, borderRadius: 5,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
  },
  applicantName: { fontWeight: "900", color: BLACK, fontSize: 14 },
  applicantMeta: { color: "#555", fontSize: 12, marginTop: 2 },

  pickButton: {
    backgroundColor: YELLOW,
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: BLACK,
  },
  pickText: { fontWeight: "900", color: BLACK },
});
