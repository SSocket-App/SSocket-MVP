// App.js — SSocket flow: Sign Up -> Check Email -> Enter Code -> Verified -> Login
// No dependencies — paste into Expo Snack App.js and Run.

import React, { useState, useRef } from "react";
import {
  SafeAreaView,
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  StatusBar,
  KeyboardAvoidingView,
  Platform,
  Alert,
  Image,
} from "react-native";

// Paste your base64 logo string between the backticks if you want it visible:
const WORDMARK_PNG = ``;

const YELLOW = "#FFD233";
const BLACK = "#000000";
const TEXT = "#111111";
const MUTED = "#9aa0a6";
const BG = "#ffffff";
const CARD = "#ffffff";
const BDR = "#e5e7eb";

export default function App() {
  StatusBar.setBarStyle("dark-content");
  const [screen, setScreen] = useState("signup"); // 'signup' | 'checkEmail' | 'enterCode' | 'verified' | 'login'
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");

  return (
    <SafeAreaView style={styles.safe}>
      <KeyboardAvoidingView
        style={{ flex: 1 }}
        behavior={Platform.OS === "ios" ? "padding" : undefined}
      >
        <View style={styles.container}>
          {WORDMARK_PNG ? (
            <Image
              source={{ uri: `data:image/png;base64,${WORDMARK_PNG}` }}
              style={styles.wordmarkImg}
              resizeMode="contain"
              accessible
              accessibilityLabel="SSocket"
            />
          ) : (
            <Text
              style={{
                fontSize: 28,
                fontWeight: "900",
                letterSpacing: 0.5,
                color: TEXT,
                marginBottom: 6,
              }}
            >
              SSocket
            </Text>
          )}

          {screen === "signup" && (
            <SignUpScreen
              onCreated={(user) => {
                setEmail(user.email);
                setName(user.name);
                setScreen("checkEmail");
              }}
            />
          )}

          {screen === "checkEmail" && (
            <CheckEmailScreen
              email={email || "you@example.com"}
              onResend={() =>
                Alert.alert("SSocket", "Verification email re-sent (demo).")
              }
              onEnterCode={() => setScreen("enterCode")}
            />
          )}

          {screen === "enterCode" && (
            <EnterCodeScreen
              onBack={() => setScreen("checkEmail")}
              onSuccess={() => setScreen("verified")}
            />
          )}

          {screen === "verified" && (
            <VerifiedScreen name={name} onContinue={() => setScreen("login")} />
          )}

          {screen === "login" && <LoginScreen emailPrefill={email} />}
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

/* --------------------- Sign Up --------------------- */
function SignUpScreen({ onCreated }) {
  // CHANGED: split Full name -> First + Last
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [pwd, setPwd] = useState("");
  const [confirmPwd, setConfirmPwd] = useState("");
  const [showPwd, setShowPwd] = useState(false);
  const [showConfirmPwd, setShowConfirmPwd] = useState(false);
  const [agree, setAgree] = useState(false);
  const [errors, setErrors] = useState({
    firstName: "",
    lastName: "",
    email: "",
    pwd: "",
    confirmPwd: "",
    agree: "",
  });
  const [loading, setLoading] = useState(false);

  const validatePassword = (password) => {
    const minLength = /.{8,}/;
    const upperCase = /[A-Z]/;
    const lowerCase = /[a-z]/;
    const number = /[0-9]/;
    const specialChar = /[!@#$%^&*(),.?":{}|<>]/;
    if (!minLength.test(password)) return "At least 8 characters";
    if (!upperCase.test(password)) return "Include an uppercase letter";
    if (!lowerCase.test(password)) return "Include a lowercase letter";
    if (!number.test(password)) return "Include a number";
    if (!specialChar.test(password)) return "Include a special character";
    return "";
  };

  const createAccount = () => {
    const next = {
      firstName: "",
      lastName: "",
      email: "",
      pwd: "",
      confirmPwd: "",
      agree: "",
    };
    if (!firstName.trim()) next.firstName = "Enter your first name";
    if (!lastName.trim()) next.lastName = "Enter your last name";
    if (!email.includes("@")) next.email = "Enter a valid email";
    const pwdErr = validatePassword(pwd);
    if (pwdErr) next.pwd = pwdErr;
    if (confirmPwd !== pwd) next.confirmPwd = "Passwords do not match";
    if (!agree) next.agree = "You must agree to the Terms";

    setErrors(next);
    if (
      next.firstName ||
      next.lastName ||
      next.email ||
      next.pwd ||
      next.confirmPwd ||
      next.agree
    )
      return;

    // Demo: proceed to Check Email
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      onCreated({ name: firstName + " " + lastName, email });
    }, 700);
  };

  return (
    <View style={styles.card}>
      <View style={{ alignItems: "center", marginBottom: 6 }}>
        <Text style={styles.title}>Create your account</Text>
        <Text style={styles.subtitle}>Join SSocket in seconds</Text>
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>First name</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={firstName}
          onChangeText={setFirstName}
          autoCapitalize="words"
          style={styles.input}
        />
        {errors.firstName ? (
          <Text style={styles.error}>{errors.firstName}</Text>
        ) : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Last name</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={lastName}
          onChangeText={setLastName}
          autoCapitalize="words"
          style={styles.input}
        />
        {errors.lastName ? (
          <Text style={styles.error}>{errors.lastName}</Text>
        ) : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Email</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={email}
          onChangeText={setEmail}
          autoCapitalize="none"
          keyboardType="email-address"
          style={styles.input}
        />
        {errors.email ? <Text style={styles.error}>{errors.email}</Text> : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Password</Text>
        <View style={{ position: "relative" }}>
          <TextInput
            placeholder=""
            placeholderTextColor="#9aa0a6"
            value={pwd}
            onChangeText={setPwd}
            secureTextEntry={!showPwd}
            style={[styles.input, { paddingRight: 56 }]}
          />
          <TouchableOpacity
            onPress={() => setShowPwd((v) => !v)}
            style={styles.eyeBtn}
            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
            accessibilityRole="button"
            accessibilityLabel={showPwd ? "Hide password" : "Show password"}
          >
            <EyeIcon open={showPwd} />
          </TouchableOpacity>
        </View>
        <Text style={styles.hint}>
          At least 8 characters, including 1 uppercase, 1 lowercase, 1 number,
          and 1 special character.
        </Text>
        {errors.pwd ? <Text style={styles.error}>{errors.pwd}</Text> : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Confirm password</Text>
        <View style={{ position: "relative" }}>
          <TextInput
            placeholder=""
            placeholderTextColor="#9aa0a6"
            value={confirmPwd}
            onChangeText={setConfirmPwd}
            secureTextEntry={!showConfirmPwd}
            style={[styles.input, { paddingRight: 56 }]}
          />
          <TouchableOpacity
            onPress={() => setShowConfirmPwd((v) => !v)}
            style={styles.eyeBtn}
            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
            accessibilityRole="button"
            accessibilityLabel={
              showConfirmPwd ? "Hide password" : "Show password"
            }
          >
            <EyeIcon open={showConfirmPwd} />
          </TouchableOpacity>
        </View>
        {errors.confirmPwd ? (
          <Text style={styles.error}>{errors.confirmPwd}</Text>
        ) : null}
      </View>

      <TouchableOpacity
        onPress={() => setAgree((v) => !v)}
        style={styles.termsRow}
        activeOpacity={0.8}
      >
        <View style={[styles.checkbox, agree && styles.checkboxChecked]} />
        <Text style={styles.termsText}>
          I agree to the <Text style={styles.link}>Terms</Text> &{" "}
          <Text style={styles.link}>Privacy Policy</Text>
        </Text>
      </TouchableOpacity>
      {errors.agree ? <Text style={styles.error}>{errors.agree}</Text> : null}

      <TouchableOpacity onPress={createAccount} activeOpacity={0.85} style={styles.cta}>
        <Text style={styles.ctaText}>
          {loading ? "Creating..." : "Create account ⚡"}
        </Text>
      </TouchableOpacity>
    </View>
  );
}

/* --------------------- Check Email --------------------- */
function CheckEmailScreen({ email, onResend, onEnterCode }) {
  return (
    <View style={styles.card}>
      <Text style={styles.title}>Check your email</Text>
      <Text style={styles.body}>
        We sent a verification link to{" "}
        <Text style={{ fontWeight: "800", color: TEXT }}>{email}</Text>.
      </Text>
      <View style={{ height: 8 }} />
      <Text style={styles.body}>
        Click the link to verify your email. If you didn't get it, you can
        resend or enter the 6-digit code.
      </Text>

      <View style={{ height: 16 }} />
      <TouchableOpacity onPress={onResend} style={styles.ctaSecondary} activeOpacity={0.85}>
        <Text style={styles.ctaSecondaryText}>Resend email</Text>
      </TouchableOpacity>

      <View style={{ height: 10 }} />
      <TouchableOpacity onPress={onEnterCode} style={styles.cta} activeOpacity={0.85}>
        <Text style={styles.ctaText}>Enter 6-digit code ⚡</Text>
      </TouchableOpacity>
    </View>
  );
}

/* --------------------- Enter Code --------------------- */
function EnterCodeScreen({ onBack, onSuccess }) {
  const [code, setCode] = useState("");
  const inputsRef = useRef([]);

  const handleChange = (text, idx) => {
    const t = text.replace(/\D/g, "");
    const chars = code.split("");
    chars[idx] = t.slice(-1) || "";
    const next = Array(6)
      .fill("")
      .map((_, i) => chars[i] || "")
      .join("");
    setCode(next);
    if (t && idx < 5) inputsRef.current[idx + 1]?.focus();
  };

  const handleKeyPress = (e, idx) => {
    if (e.nativeEvent.key === "Backspace" && !code[idx] && idx > 0) {
      inputsRef.current[idx - 1]?.focus();
    }
  };

  const verify = () => {
    // DEMO: always advance so you can preview the next screen
    onSuccess();
  };

  return (
    <View style={styles.card}>
      <Text style={styles.title}>Enter verification code</Text>
      <Text style={styles.body}>Enter the 6-digit code we sent to your email.</Text>

      <View style={styles.codeRow}>
        {Array.from({ length: 6 }).map((_, idx) => (
          <TextInput
            key={idx}
            ref={(el) => (inputsRef.current[idx] = el)}
            style={styles.codeBox}
            keyboardType="number-pad"
            maxLength={1}
            value={code[idx] || ""}
            onChangeText={(t) => handleChange(t, idx)}
            onKeyPress={(e) => handleKeyPress(e, idx)}
            autoFocus={idx === 0}
          />
        ))}
      </View>

      <TouchableOpacity onPress={verify} style={styles.cta} activeOpacity={0.85}>
        <Text style={styles.ctaText}>Verify email ⚡</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={onBack} style={styles.backLink}>
        <Text style={styles.backLinkText}>← Back</Text>
      </TouchableOpacity>
    </View>
  );
}

/* --------------------- Verified --------------------- */
function VerifiedScreen({ name, onContinue }) {
  return (
    <View style={styles.card}>
      <View style={styles.successBadge}>
        <Text style={styles.successBolt}>⚡</Text>
      </View>
      <Text style={styles.title}>Email verified</Text>
      <Text style={styles.body}>
        Great! {name ? name + "," : ""} your email address is confirmed.
      </Text>
      <TouchableOpacity onPress={onContinue} style={styles.cta} activeOpacity={0.85}>
        <Text style={styles.ctaText}>Continue to Sign in</Text>
      </TouchableOpacity>
    </View>
  );
}

/* --------------------- Login --------------------- */
function LoginScreen({ emailPrefill = "" }) {
  const [email, setEmail] = useState(emailPrefill);
  const [pwd, setPwd] = useState("");

  const signIn = () => {
    Alert.alert("SSocket", "Signed in (demo). Plug backend here.");
  };

  return (
    <View style={styles.card}>
      <View style={{ alignItems: "center", marginBottom: 6 }}>
        <Text style={styles.title}>Welcome back</Text>
        <Text style={styles.subtitle}>Sign in to continue</Text>
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Email</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={email}
          onChangeText={setEmail}
          autoCapitalize="none"
          keyboardType="email-address"
          style={styles.input}
        />
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Password</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={pwd}
          onChangeText={setPwd}
          secureTextEntry
          style={styles.input}
        />
      </View>

      <TouchableOpacity onPress={signIn} activeOpacity={0.85} style={styles.cta}>
        <Text style={styles.ctaText}>Sign in ⚡</Text>
      </TouchableOpacity>
    </View>
  );
}

/* --------------- Shared Styles & Icons --------------- */

function EyeIcon({ open }) {
  return (
    <View style={eyeStyles.wrapper}>
      <View style={eyeStyles.oval} />
      {open ? <View style={eyeStyles.pupil} /> : <View style={eyeStyles.slash} />}
    </View>
  );
}

const eyeStyles = StyleSheet.create({
  wrapper: {
    position: "absolute",
    right: 0,
    top: 0,
    width: 44,
    height: 44,
    alignItems: "center",
    justifyContent: "center",
  },
  oval: {
    width: 22,
    height: 14,
    borderRadius: 11,
    borderWidth: 2,
    borderColor: TEXT,
    backgroundColor: "transparent",
  },
  pupil: {
    position: "absolute",
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: TEXT,
  },
  slash: {
    position: "absolute",
    width: 24,
    height: 2,
    backgroundColor: TEXT,
    transform: [{ rotate: "45deg" }],
  },
});

const styles = StyleSheet.create({
  safe: { flex: 1, backgroundColor: BG },
  container: {
    flex: 1,
    paddingHorizontal: 22,
    paddingTop: 24,
    alignItems: "center",
    justifyContent: "center",
    gap: 16,
    backgroundColor: BG,
  },
  wordmarkImg: { width: 260, height: 80, marginBottom: 6 },

  card: {
    width: "100%",
    backgroundColor: CARD,
    borderRadius: 16,
    borderWidth: StyleSheet.hairlineWidth,
    borderColor: BDR,
    padding: 16,
    gap: 14,
    elevation: 6,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 12,
    shadowOffset: { width: 0, height: 6 },
  },

  title: { fontSize: 22, fontWeight: "800", color: TEXT },
  subtitle: { marginTop: 2, fontSize: 14, color: MUTED },
  body: { fontSize: 14, color: "#374151", lineHeight: 20 },

  field: { gap: 6 },
  label: { fontSize: 13, color: TEXT, fontWeight: "700" },
  input: {
    height: 48,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: BDR,
    paddingHorizontal: 14,
    fontSize: 16,
    color: TEXT,
    backgroundColor: "#fff",
  },

  eyeBtn: { position: "absolute", right: 10, top: 8, width: 32, height: 32 },

  termsRow: { flexDirection: "row", alignItems: "center", gap: 10, marginTop: 2 },
  checkbox: {
    width: 18,
    height: 18,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: "#525252",
    backgroundColor: "transparent",
  },
  checkboxChecked: { backgroundColor: "#111" },
  termsText: { color: TEXT, fontSize: 13 },
  link: { color: TEXT, fontWeight: "800", textDecorationLine: "underline" },

  hint: { fontSize: 12, color: MUTED, marginTop: 6 },

  cta: {
    height: 50,
    borderRadius: 14,
    backgroundColor: BLACK,
    alignItems: "center",
    justifyContent: "center",
  },
  ctaText: { color: "#fff", fontSize: 16.5, fontWeight: "800", letterSpacing: 0.3 },

  ctaSecondary: {
    height: 46,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: BDR,
    backgroundColor: "#f8fafc",
    alignItems: "center",
    justifyContent: "center",
  },
  ctaSecondaryText: { color: TEXT, fontSize: 15, fontWeight: "700" },

  backLink: { alignSelf: "center", marginTop: 10 },
  backLinkText: { color: TEXT, fontSize: 14, textDecorationLine: "underline" },

  codeRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginVertical: 12,
  },
  codeBox: {
    width: 48,
    height: 56,
    borderRadius: 12,
    borderWidth: 1.5,
    borderColor: BDR,
    textAlign: "center",
    fontSize: 20,
    color: TEXT,
    backgroundColor: "#fff",
  },

  successBadge: {
    alignSelf: "center",
    width: 84,
    height: 84,
    borderRadius: 42,
    backgroundColor: "#111",
    alignItems: "center",
    justifyContent: "center",
    marginBottom: 4,
    elevation: 8,
    shadowColor: "#000",
    shadowOpacity: 0.2,
    shadowRadius: 16,
    shadowOffset: { width: 0, height: 8 },
  },
  successBolt: { fontSize: 46, color: YELLOW, marginTop: -2 },

  error: { color: "#b00020", fontSize: 12, marginTop: 4 },
});
