// SSocketPendingContractsList_Contractor.js
// Contractor-side: Single pending mega contract (only one allowed).
// Shows full details incl. Job Role. Expo-compatible, no external libs.

import React, { useMemo } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  Platform,
  TouchableOpacity,
  Alert,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const YELLOW = "#FFD54A";
const BLACK = "#000";
const WHITE = "#FFF";

export default function SSocketPendingContractsList_Contractor({ contract, onOpen }) {
  // Demo fallback if not provided
  const demo = useMemo(
    () => ({
      id: "mc_201",
      contracteeName: "Ada Ventures Ltd",
      contractorName: "John Doe",
      jobRole: "Accountant", // ← Job Role
      workDescription: "Monthly accounts reconciliation and payroll processing",
      startDate: "2025-09-01",
      endDate: "2025-12-01",
      salary: 350000,
      paymentPeriod: "month", // week | month | project | milestone | on_completion
      lastMessage: "Please confirm Friday 4pm for weekly update.",
      updatedAt: "2025-08-20",
      unread: 2,
      status: "Negotiation", // Negotiation | Pending Seal | ...
    }),
    []
  );

  // Only one pending mega contract allowed
  const data = contract || demo;

  const goBack = () => Alert.alert("Back", "Hook this into navigation.");
  const openItem = () => {
    if (typeof onOpen === "function") onOpen(data);
    else Alert.alert("Open", `Open contract with ${data.contracteeName}`);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.backBtn} activeOpacity={0.8} onPress={goBack}>
          <Ionicons name="arrow-back-outline" size={22} color={WHITE} />
        </TouchableOpacity>
        <Text style={styles.topTitle}>My Pending Mega Contract</Text>
        <View style={{ width: 40 }} />
      </View>
      <View style={styles.topAccent} />

      {/* If no pending contract, show empty */}
      {!data ? (
        <View style={[styles.emptyWrap, { paddingHorizontal: 12 }]}>
          <Text style={styles.emptyText}>No pending mega contract.</Text>
        </View>
      ) : (
        <View style={{ paddingHorizontal: 12, paddingBottom: 20 }}>
          {/* Single Contract Card */}
          <View style={[styles.card, styles.row]}>
            {/* Avatar-ish block */}
            <View style={styles.avatar}>
              <View style={styles.avatarHead} />
              <View style={styles.avatarBody} />
            </View>

            {/* Details */}
            <View style={{ flex: 1 }}>
              {/* Company */}
              <Text style={styles.name} numberOfLines={1}>
                {data.contracteeName}
              </Text>

              {/* Role (prominent) */}
              <View style={styles.roleBox}>
                <Text style={styles.roleLabel}>Job Role</Text>
                <Text style={styles.roleValue}>{data.jobRole || "—"}</Text>
              </View>

              {/* Scope */}
              <Text style={styles.desc} numberOfLines={3}>
                {data.workDescription}
              </Text>

              {/* Meta row: status + exact pay + unread */}
              <View style={styles.metaRow}>
                <View style={styles.badgeYellow}>
                  <Text style={styles.badgeYellowText}>{data.status || "Negotiation"}</Text>
                </View>
                <View style={styles.badgeOutline}>
                  <Text style={styles.badgeOutlineText}>
                    {formatExactPay(data.salary, data.paymentPeriod)}
                  </Text>
                </View>
                {data.unread > 0 && (
                  <View style={styles.badgeUnread}>
                    <Text style={styles.badgeUnreadText}>{data.unread}</Text>
                  </View>
                )}
              </View>

              {/* Key-Value grid */}
              <View style={styles.kvGrid}>
                <KV label="Contractor" value={data.contractorName} />
                <KV label="Start Date" value={data.startDate} />
                <KV label="End / Deadline" value={data.endDate} />
                <KV label="Payment Period" value={readablePeriod(data.paymentPeriod)} />
              </View>

              {/* Last message + updated */}
              <Text style={styles.lastMsg} numberOfLines={2}>
                <Text style={{ fontWeight: "900" }}>Last:</Text> {data.lastMessage || "No messages yet"}
              </Text>
              <Text style={styles.updatedAt}>Updated: {data.updatedAt || "—"}</Text>
            </View>

            {/* Action */}
            <TouchableOpacity activeOpacity={0.9} style={styles.openBtn} onPress={openItem}>
              <Ionicons name="open-outline" size={16} color={BLACK} />
              <Text style={styles.openBtnTxt}>Open</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </SafeAreaView>
  );
}

/* ===== Small components ===== */
function KV({ label, value }) {
  return (
    <View style={styles.kvItem}>
      <Text style={styles.kvLabel}>{label}</Text>
      <Text style={styles.kvValue} numberOfLines={1}>
        {value || "—"}
      </Text>
    </View>
  );
}

/* ===== Helpers ===== */
function formatMoney(n) {
  const amount = Number(n);
  if (Number.isNaN(amount)) return "—";
  return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
function formatExactPay(salary, period) {
  if (!salary) return "—";
  const per = normPeriod(period);
  return `NGN ${formatMoney(salary)}${per ? ` per ${per}` : ""}`;
}
function normPeriod(p) {
  if (!p) return "";
  const v = String(p).toLowerCase();
  if (v.startsWith("week")) return "week";
  if (v.startsWith("mon")) return "month";
  if (v.startsWith("proj")) return "project";
  if (v.startsWith("mile")) return "milestone";
  if (v === "on_completion") return "project";
  return v;
}
function readablePeriod(p) {
  const v = normPeriod(p);
  if (v === "mile") return "milestone";
  return v || "—";
}

/* ===== Styles ===== */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  /* Top */
  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    alignItems: "center",
    justifyContent: "flex-end",
    paddingBottom: 14,
    position: "relative",
  },
  backBtn: { position: "absolute", left: 16, bottom: 14, padding: 6 },
  topTitle: { color: WHITE, fontSize: 20, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  /* Single card */
  card: {
    backgroundColor: WHITE,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    padding: 12,
  },
  row: { flexDirection: "row", alignItems: "flex-start", gap: 12 },

  avatar: {
    width: 46, height: 46, borderRadius: 23,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
    alignItems: "center", justifyContent: "center",
  },
  avatarHead: {
    width: 12, height: 12, borderRadius: 6,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE, marginBottom: 2,
  },
  avatarBody: {
    width: 22, height: 10, borderRadius: 6,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
  },

  name: { color: BLACK, fontSize: 16, fontWeight: "900" },
  desc: { color: "#333", fontSize: 12, marginTop: 6 },

  roleBox: {
    marginTop: 6,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 6,
    alignSelf: "flex-start",
    backgroundColor: WHITE,
  },
  roleLabel: { color: "#444", fontSize: 10, fontWeight: "900" },
  roleValue: { color: BLACK, fontSize: 13, fontWeight: "900", marginTop: 1 },

  metaRow: { flexDirection: "row", alignItems: "center", flexWrap: "wrap", gap: 8, marginTop: 8 },

  badgeYellow: {
    paddingHorizontal: 8, paddingVertical: 3, borderRadius: 6, backgroundColor: YELLOW,
    borderWidth: 2, borderColor: BLACK,
  },
  badgeYellowText: { color: BLACK, fontSize: 12, fontWeight: "800" },

  badgeOutline: {
    paddingHorizontal: 8, paddingVertical: 3, borderRadius: 6, backgroundColor: WHITE,
    borderWidth: 2, borderColor: BLACK,
  },
  badgeOutlineText: { color: BLACK, fontSize: 12, fontWeight: "800" },

  badgeUnread: {
    paddingHorizontal: 8, paddingVertical: 3, borderRadius: 999, backgroundColor: WHITE,
    borderWidth: 2, borderColor: BLACK, minWidth: 28, alignItems: "center",
  },
  badgeUnreadText: { color: BLACK, fontSize: 12, fontWeight: "900" },

  kvGrid: {
    marginTop: 8,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    padding: 10,
    backgroundColor: WHITE,
    gap: 8,
  },
  kvItem: { flexDirection: "row", justifyContent: "space-between" },
  kvLabel: { color: "#444", fontSize: 11, fontWeight: "900", marginRight: 10 },
  kvValue: { color: BLACK, fontSize: 12, fontWeight: "700", flexShrink: 1, textAlign: "right" },

  lastMsg: { color: "#444", fontSize: 11, marginTop: 8 },
  updatedAt: { color: "#777", fontSize: 10, marginTop: 2 },

  openBtn: {
    alignSelf: "center",
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: YELLOW,
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
  },
  openBtnTxt: { color: BLACK, fontWeight: "900", fontSize: 12 },

  /* Empty */
  emptyWrap: { marginTop: 40, alignItems: "center", justifyContent: "center" },
  emptyText: { color: "#666", fontWeight: "600" },
});
