// EmployerPool.js
import React, { useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  Platform,
  TouchableOpacity,
  FlatList,
  Alert,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const YELLOW = "#FFD54A";
const BLACK = "#000";
const WHITE = "#FFF";

/* -------------------- Sample Data -------------------- */
const EMPLOYERS = [
  { id: "e1", name: "Acme Corp", rank: "Tier A" },
  { id: "e2", name: "BrightLabs", rank: "Tier B" },
  { id: "e3", name: "Nova Foods", rank: "Tier C" },
  { id: "e4", name: "DigiSpace", rank: "Tier B" },
];

const MEGA_CONTRACTS = [
  { id: "m1", title: "Warehouse Build-Out", employer: "Acme Corp", budget: "₦85M", status: "Active", deadline: "Nov 12, 2025" },
  { id: "m2", title: "Nationwide Rollout", employer: "BrightLabs", budget: "₦120M", status: "Planning", deadline: "Jan 28, 2026" },
];

const MINI_CONTRACTS = [
  { id: "s1", title: "Landing Page Revamp", employer: "DigiSpace", progress: 72, due: "Aug 26" },
  { id: "s2", title: "POS Bug Fix", employer: "Nova Foods", progress: 40, due: "Sep 01" },
  { id: "s3", title: "Logo Refresh", employer: "Acme Corp", progress: 100, due: "Done" },
];

export default function EmployerPool() {
  const [mode, setMode] = useState("mega"); // "mega" | "mini"

  const openTrackList = () => Alert.alert("Track List", "Open your tracked businesses & contacts.");

  const renderEmployer = ({ item }) => (
    <View style={styles.empChip}>
      <Text style={styles.empName} numberOfLines={1}>{item.name}</Text>
      <Text style={styles.empRank}>{item.rank}</Text>
    </View>
  );

  const renderMega = ({ item }) => (
    <View style={styles.megaCard}>
      <View style={styles.megaHeader}>
        <Text style={styles.megaTitle} numberOfLines={1}>{item.title}</Text>
        <StatusPill text={item.status} />
      </View>
      <View style={styles.megaMetaRow}>
        <MetaBadge label="Employer" value={item.employer} />
        <MetaBadge label="Budget" value={item.budget} />
        <MetaBadge label="Deadline" value={item.deadline} />
      </View>
      <View style={styles.megaActions}>
        <ActionBtn text="Open" onPress={() => Alert.alert("Open", item.title)} />
        <ActionBtn text="Stats" outlined onPress={() => Alert.alert("Stats", item.title)} />
      </View>
    </View>
  );

  const renderMini = ({ item }) => (
    <View style={styles.miniRow}>
      <View style={styles.miniLeft}>
        <Text style={styles.miniTitle} numberOfLines={1}>{item.title}</Text>
        <Text style={styles.miniSub}>{item.employer}</Text>
      </View>
      <View style={styles.miniRight}>
        <View style={styles.progressBar}>
          <View style={[styles.progressFill, { width: `${Math.max(0, Math.min(100, item.progress))}%` }]} />
        </View>
        <Text style={styles.miniDue}>Due: {item.due}</Text>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar */}
      <View style={styles.topBar}>
        <Text style={styles.topTitle}>Employer Pool</Text>
      </View>
      <View style={styles.topAccent} />

      {/* Under top bar: Track list button (left only) */}
      <View style={styles.trackRow}>
        <TouchableOpacity style={styles.trackListBtn} activeOpacity={0.9} onPress={openTrackList}>
          <Ionicons name="list-outline" size={16} color={BLACK} />
          <Text style={styles.trackBtnText}>Track List</Text>
        </TouchableOpacity>
      </View>

      {/* Suggested Businesses Section */}
      <Text style={styles.sectionTitle}>Suggested Businesses to Track</Text>
      <FlatList
        data={EMPLOYERS}
        keyExtractor={(i) => i.id}
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={{ paddingHorizontal: 14, paddingBottom: 6 }}
        ItemSeparatorComponent={() => <View style={{ width: 10 }} />}
        renderItem={renderEmployer}
      />

      {/* Toggle: Mega vs Mini */}
      <View style={styles.toggleRow}>
        <TouchableOpacity
          style={[styles.toggleBtn, mode === "mega" ? styles.toggleActive : styles.toggleIdle]}
          activeOpacity={0.9}
          onPress={() => setMode("mega")}
        >
          <Text style={[styles.toggleText, { color: mode === "mega" ? BLACK : YELLOW }]}>
            Mega Contracts
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.toggleBtn, mode === "mini" ? styles.toggleActive : styles.toggleIdle]}
          activeOpacity={0.9}
          onPress={() => setMode("mini")}
        >
          <Text style={[styles.toggleText, { color: mode === "mini" ? BLACK : YELLOW }]}>
            Mini Contracts
          </Text>
        </TouchableOpacity>
      </View>

      {/* Contracts List */}
      <FlatList
        data={mode === "mega" ? MEGA_CONTRACTS : MINI_CONTRACTS}
        keyExtractor={(i) => i.id}
        contentContainerStyle={{ paddingBottom: 18 }}
        ItemSeparatorComponent={() => <View style={styles.sep} />}
        renderItem={mode === "mega" ? renderMega : renderMini}
        showsVerticalScrollIndicator={false}
        style={{ paddingHorizontal: 12, marginTop: 6 }}
      />
    </SafeAreaView>
  );
}

/* -------------------- Small UI Pieces -------------------- */
function StatusPill({ text }) {
  return (
    <View style={styles.statusPill}>
      <Text style={styles.statusText}>{text}</Text>
    </View>
  );
}

function MetaBadge({ label, value }) {
  return (
    <View style={styles.metaBadge}>
      <Text style={styles.metaLabel}>{label}</Text>
      <Text style={styles.metaValue} numberOfLines={1}>{value}</Text>
    </View>
  );
}

function ActionBtn({ text, outlined, onPress }) {
  return (
    <TouchableOpacity
      activeOpacity={0.9}
      onPress={onPress}
      style={[styles.actionBtn, outlined ? styles.actionOutlined : styles.actionFilled]}
    >
      <Text style={[styles.actionText, outlined ? { color: BLACK } : { color: BLACK }]}>{text}</Text>
    </TouchableOpacity>
  );
}

/* -------------------- Styles -------------------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  /* Top bar */
  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    alignItems: "center",
    justifyContent: "flex-end",
    paddingBottom: 14,
  },
  topTitle: { color: WHITE, fontSize: 26, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  /* Buttons under top bar */
  trackRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-start",
    paddingHorizontal: 14,
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#EFEFEF",
  },
  trackListBtn: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 18,
    borderWidth: 2,
    borderColor: YELLOW,
    backgroundColor: YELLOW,
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
  },
  trackBtnText: { color: BLACK, fontSize: 14, fontWeight: "900" },

  /* Section title */
  sectionTitle: {
    fontSize: 16,
    fontWeight: "800",
    color: BLACK,
    paddingHorizontal: 16,
    marginTop: 10,
    marginBottom: 6,
  },

  /* Employers chips */
  empChip: {
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: WHITE,
    borderRadius: 12,
    paddingVertical: 10,
    paddingHorizontal: 12,
    minWidth: 140,
  },
  empName: { color: BLACK, fontWeight: "900", fontSize: 14 },
  empRank: { color: "#666", fontSize: 12, marginTop: 2 },

  /* Toggle */
  toggleRow: {
    flexDirection: "row",
    gap: 10,
    paddingHorizontal: 14,
    paddingTop: 10,
  },
  toggleBtn: {
    flex: 1,
    borderRadius: 18,
    borderWidth: 2,
    paddingVertical: 10,
    alignItems: "center",
  },
  toggleActive: { backgroundColor: YELLOW, borderColor: YELLOW },
  toggleIdle: { backgroundColor: WHITE, borderColor: YELLOW },
  toggleText: { fontSize: 13, fontWeight: "900" },

  /* Mega cards */
  megaCard: {
    backgroundColor: WHITE,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 14,
    padding: 12,
    marginTop: 8,
  },
  megaHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 10,
  },
  megaTitle: { color: BLACK, fontWeight: "900", fontSize: 16, flex: 1, marginRight: 10 },
  statusPill: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: YELLOW,
    backgroundColor: WHITE,
  },
  statusText: { color: BLACK, fontWeight: "900", fontSize: 12 },

  megaMetaRow: {
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 8,
    marginBottom: 10,
  },
  metaBadge: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 6,
  },
  metaLabel: { fontSize: 10, color: "#666", fontWeight: "900" },
  metaValue: { fontSize: 13, color: BLACK, fontWeight: "900", maxWidth: 140 },

  megaActions: { flexDirection: "row", gap: 10 },
  actionBtn: {
    flex: 1,
    borderRadius: 10,
    borderWidth: 2,
    paddingVertical: 10,
    alignItems: "center",
  },
  actionFilled: { backgroundColor: YELLOW, borderColor: YELLOW },
  actionOutlined: { backgroundColor: WHITE, borderColor: BLACK },
  actionText: { fontWeight: "900", fontSize: 14 },

  /* Mini rows */
  miniRow: {
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    padding: 12,
    marginTop: 8,
    backgroundColor: WHITE,
    flexDirection: "row",
    alignItems: "center",
    gap: 12,
  },
  miniLeft: { flex: 1 },
  miniTitle: { color: BLACK, fontWeight: "900", fontSize: 15 },
  miniSub: { color: "#666", fontSize: 12, marginTop: 2 },

  miniRight: { width: 130 },
  progressBar: {
    height: 8,
    borderRadius: 6,
    backgroundColor: "#EFEFEF",
    overflow: "hidden",
    borderWidth: 1,
    borderColor: "#DDD",
  },
  progressFill: { height: "100%", backgroundColor: YELLOW },
  miniDue: { color: "#555", fontSize: 12, marginTop: 6, fontWeight: "700", textAlign: "right" },

  /* Misc */
  sep: { height: 8 },
});
