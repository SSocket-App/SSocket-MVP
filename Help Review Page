// App.js — Help Review page with Volunteer dropdown feedback + Winner Picking (1st/2nd/3rd)
import React, { useMemo, useRef, useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  Platform,
  TouchableOpacity,
  FlatList,
  Pressable,
  Alert,
  TextInput,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const BLACK = "#000";
const WHITE = "#FFF";
const YELLOW = "#FFD54A";
const MUTED = "#6B7280";

/* ==== Tag sets — MUST match HelpStats.js ==== */
const GREEN_TAGS = [
  "Creative","Analytical","Practical","Detailed",
  "Helpful","Insightful","Innovative","Professional",
];
const RED_TAGS = [
  "Undetailed explanation","Overcomplicated","Unconcreted illustration",
  "Unclear solution","Not actionable","Messy explanation","Misleading fact",
];

/** Sample volunteers */
const VOLUNTEERS = [
  { id: "v1", name: "Anonymous 1",
    response: "Reconciled POS vs bank settlement; adjusted for timezone offsets; re-ran batches with detailed logging." },
  { id: "v2", name: "Anonymous 2",
    response: "Checked firmware and network stability; added stabilizer; verified breaker ratings at peak load." },
  { id: "v3", name: "Anonymous 3",
    response: "Created incident log; compared timestamps; exported raw logs; isolated module before hotfix." },
  { id: "v4", name: "Anonymous 4",
    response: "Enabled audit trails; rebuilt index; validated merchant fee mappings and cutoff windows." },
];

export default function App() {
  // Winner placements
  const [placements, setPlacements] = useState({ first: null, second: null, third: null });

  // dropdown state per volunteer
  const [open, setOpen] = useState({});
  const [submitted, setSubmitted] = useState({}); // one-time guard

  // local drafts per volunteer
  const [drafts, setDrafts] = useState(() =>
    Object.fromEntries(
      VOLUNTEERS.map(v => [v.id, { rating: 0, greenTags: [], redTags: [], review: "" }])
    )
  );

  const data = useMemo(() => VOLUNTEERS, []);
  const listRef = useRef(null);

  const toggleOpen = (id) => {
    if (submitted[id]) return;
    setOpen(p => ({ ...p, [id]: !p[id] }));
  };

  const updateDraft = (id, patch) =>
    setDrafts(p => ({ ...p, [id]: { ...p[id], ...patch } }));

  const toggleChip = (id, key, tag) => {
    const prev = drafts[id]?.[key] || [];
    const next = prev.includes(tag) ? prev.filter(t => t !== tag) : [...prev, tag];
    updateDraft(id, { [key]: next });
  };

  const submitFeedback = (id) => {
    const d = drafts[id] || {};
    if (!d.rating) return Alert.alert("Missing rating", "Please give a 1–5★ rating.");
    const payload = {
      volunteerSolutionId: id,
      rating: d.rating,
      greenTags: d.greenTags,
      redTags: d.redTags,
      privateReview: (d.review || "").trim(),
    };
    console.log("HELP_REVIEW_SUBMIT", payload);
    setSubmitted(p => ({ ...p, [id]: true }));
    setOpen(p => ({ ...p, [id]: false }));
    Alert.alert("Submitted", "Solution can only be offered once.");
  };

  // Winner selection handlers
  const setPlace = (place, volunteerId) => {
    setPlacements((prev) => {
      const currentForPlace = prev[place];

      // If tapping active: unset
      if (currentForPlace === volunteerId) {
        return { ...prev, [place]: null };
      }

      // Remove this volunteer from any other place
      const next = { ...prev };
      Object.keys(next).forEach((k) => {
        if (next[k] === volunteerId) next[k] = null;
      });

      // Assign to requested place
      next[place] = volunteerId;
      return next;
    });
  };

  const finalizeWinners = () => {
    const findName = (id) => data.find(v => v.id === id)?.name || "—";
    const msg =
      `🏆 Winners\n\n` +
      `1st: ${findName(placements.first)}\n` +
      `2nd: ${findName(placements.second)}\n` +
      `3rd: ${findName(placements.third)}`;
    Alert.alert("Finalize Winners", msg);
    // Here you could POST to your backend with `placements`
    // e.g., fetch('/api/help/winners', { method: 'POST', body: JSON.stringify(placements) })
  };

  const renderItem = ({ item }) => {
    const badge =
      placements.first === item.id ? "1st" :
      placements.second === item.id ? "2nd" :
      placements.third === item.id ? "3rd" : null;

    return (
      <VolunteerCard
        item={item}
        winnerBadge={badge}
        isOpen={!!open[item.id]}
        isSubmitted={!!submitted[item.id]}
        draft={drafts[item.id]}
        onToggleOpen={() => toggleOpen(item.id)}
        onSetRating={(n) => updateDraft(item.id, { rating: n })}
        onToggleGreen={(tag) => toggleChip(item.id, "greenTags", tag)}
        onToggleRed={(tag) => toggleChip(item.id, "redTags", tag)}
        onChangeReview={(txt) => updateDraft(item.id, { review: txt })}
        onSubmit={() => submitFeedback(item.id)}
        onPickFirst={() => setPlace("first", item.id)}
        onPickSecond={() => setPlace("second", item.id)}
        onPickThird={() => setPlace("third", item.id)}
        isFirst={placements.first === item.id}
        isSecond={placements.second === item.id}
        isThird={placements.third === item.id}
      />
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top bar */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.backBox} activeOpacity={0.8}>
          <Ionicons name="chevron-back" size={24} color={WHITE} />
        </TouchableOpacity>

        <Text style={styles.topTitle}>Helps Review</Text>

        <View style={{ width: 40 }} />
      </View>
      <View style={styles.topAccent} />

      {/* Scrollable list */}
      <FlatList
        ref={listRef}
        data={data}
        keyExtractor={(i) => i.id}
        renderItem={renderItem}
        contentContainerStyle={{ paddingBottom: 20 }}
        showsVerticalScrollIndicator={false}
      />

      {/* Finalize winners CTA */}
      <View style={styles.finalizeBar}>
        <TouchableOpacity style={styles.finalizeBtn} activeOpacity={0.9} onPress={finalizeWinners}>
          <Ionicons name="trophy-outline" size={18} color={BLACK} />
          <Text style={styles.finalizeTxt}>Finalize Winners</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

/* ---------- Small UI ---------- */
function StarsPicker({ value, onChange, disabled }) {
  return (
    <View style={{ flexDirection: "row" }}>
      {[1,2,3,4,5].map(i => (
        <TouchableOpacity
          key={i}
          disabled={disabled}
          onPress={() => !disabled && onChange(i)}
          activeOpacity={disabled ? 1 : 0.7}
          style={{ marginRight: 3 }}
        >
          <Ionicons
            name={i <= value ? "star" : "star-outline"}
            size={22}
            color={disabled ? "#CCC" : YELLOW}
          />
        </TouchableOpacity>
      ))}
    </View>
  );
}

/* ---------- Volunteer Card ---------- */
function VolunteerCard({
  item, winnerBadge, isOpen, isSubmitted,
  draft, onToggleOpen,
  onSetRating, onToggleGreen, onToggleRed,
  onChangeReview, onSubmit,
  onPickFirst, onPickSecond, onPickThird,
  isFirst, isSecond, isThird,
}) {
  const isAnyWinner = !!winnerBadge;

  return (
    <Pressable
      style={[
        styles.card,
        isAnyWinner && { borderColor: YELLOW, backgroundColor: "#FFFDF2" }
      ]}
    >
      <View style={styles.cardHeader}>
        <View style={{ flexDirection: "row", alignItems: "center" }}>
          <Text style={styles.name}>{item.name}</Text>
          {winnerBadge && (
            <View style={styles.winnerPill}>
              <Ionicons name="trophy-outline" size={14} color={BLACK} />
              <Text style={styles.winnerPillTxt}>{winnerBadge}</Text>
            </View>
          )}
        </View>

        <TouchableOpacity onPress={onToggleOpen} activeOpacity={0.8} style={styles.volBtn}>
          <Text style={styles.volTxt}>Volunteer</Text>
          <Ionicons name={isOpen ? "chevron-up" : "chevron-down"} size={16} color={BLACK} style={{ marginLeft: 6 }} />
        </TouchableOpacity>
      </View>

      {/* Response text */}
      <View style={styles.responseBox}>
        <Text style={styles.responseText}>{item.response}</Text>
      </View>

      {/* Winner picker */}
      <View style={styles.winnerRow}>
        <Text style={styles.formLabel}>Pick Winner</Text>
        <View style={styles.winnerChips}>
          <WinChip label="1st" active={isFirst} onPress={onPickFirst} />
          <WinChip label="2nd" active={isSecond} onPress={onPickSecond} />
          <WinChip label="3rd" active={isThird} onPress={onPickThird} />
        </View>
      </View>

      {/* Dropdown content (feedback) */}
      {isOpen && !isSubmitted && (
        <View style={styles.feedbackWrap}>
          <Text style={styles.formLabel}>Rating</Text>
          <StarsPicker value={draft?.rating || 0} onChange={onSetRating} disabled={false} />

          <Text style={[styles.formLabel, { marginTop: 12 }]}>Green Tags (Strengths)</Text>
          <View style={styles.tagsWrap}>
            {GREEN_TAGS.map(t => {
              const active = draft?.greenTags?.includes(t);
              return (
                <TouchableOpacity
                  key={t}
                  onPress={() => onToggleGreen(t)}
                  activeOpacity={0.85}
                  style={[styles.tagChip, active && styles.tagChipActive]}
                >
                  <Text style={[styles.tagText, active && styles.tagTextActive]}>{t}</Text>
                </TouchableOpacity>
              );
            })}
          </View>

          <Text style={[styles.formLabel, { marginTop: 12 }]}>Red Tags (Reasons not 5★)</Text>
          <View style={styles.tagsWrap}>
            {RED_TAGS.map(t => {
              const active = draft?.redTags?.includes(t);
              return (
                <TouchableOpacity
                  key={t}
                  onPress={() => onToggleRed(t)}
                  activeOpacity={0.85}
                  style={[styles.tagChip, active && styles.tagChipActive]}
                >
                  <Text style={[styles.tagText, active && styles.tagTextActive]}>{t}</Text>
                </TouchableOpacity>
              );
            })}
          </View>

          <Text style={[styles.formLabel, { marginTop: 12 }]}>Review (private to system)</Text>
          <TextInput
            placeholder="Write a short private review…"
            placeholderTextColor="#9AA0A6"
            value={draft?.review || ""}
            onChangeText={onChangeReview}
            style={[styles.input, styles.inputMultiline]}
            multiline
            numberOfLines={4}
            textAlignVertical="top"
          />
          <Text style={styles.privateNote}>🔒 Reviews are private and only visible to the system.</Text>

          <Text style={styles.warning}>⚠️ Solution can only be offered once.</Text>

          <TouchableOpacity activeOpacity={0.9} onPress={onSubmit} style={styles.submitBtn}>
            <Text style={styles.submitBtnText}>Submit</Text>
          </TouchableOpacity>
        </View>
      )}
    </Pressable>
  );
}

function WinChip({ label, active, onPress }) {
  return (
    <TouchableOpacity
      onPress={onPress}
      activeOpacity={0.85}
      style={[styles.winChip, active && styles.winChipActive]}
    >
      <Text style={[styles.winChipTxt, active && styles.winChipTxtActive]}>{label}</Text>
    </TouchableOpacity>
  );
}

/* ----------------- Styles ----------------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  /* Top Bar */
  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    paddingHorizontal: 12,
    paddingBottom: 12,
    flexDirection: "row",
    alignItems: "flex-end",
    justifyContent: "space-between",
  },
  backBox: { width: 40, height: 36, justifyContent: "center" },
  topTitle: { color: WHITE, fontSize: 22, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  /* card */
  card: {
    marginHorizontal: 12, marginVertical: 8,
    borderWidth: 2, borderColor: BLACK, borderRadius: 10,
    padding: 10, backgroundColor: WHITE,
  },
  cardHeader: {
    flexDirection: "row", alignItems: "center", justifyContent: "space-between", marginBottom: 8,
  },
  name: { flex: 0, marginLeft: 0, color: BLACK, fontSize: 16, fontWeight: "800", marginRight: 8 },

  // Winner badge next to name
  winnerPill: {
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 2, borderColor: BLACK,
    backgroundColor: YELLOW,
    paddingHorizontal: 8, paddingVertical: 4,
    borderRadius: 999,
  },
  winnerPillTxt: { marginLeft: 6, color: BLACK, fontWeight: "900", fontSize: 12 },

  volBtn: {
    borderRadius: 10, paddingVertical: 6, paddingHorizontal: 10,
    flexDirection: "row", alignItems: "center",
    borderWidth: 2, borderColor: BLACK, backgroundColor: YELLOW,
  },
  volTxt: { fontWeight: "900", color: BLACK },

  /* response */
  responseBox: { borderWidth: 1, borderColor: "#E5E5E5", borderRadius: 8, padding: 10, backgroundColor: "#FAFAFA" },
  responseText: { color: "#333", fontSize: 13 },

  /* Winner picker row */
  winnerRow: { marginTop: 10 },
  winnerChips: { flexDirection: "row", alignItems: "center", gap: 8, marginTop: 6 },
  winChip: {
    borderWidth: 2, borderColor: BLACK, borderRadius: 999,
    paddingHorizontal: 12, paddingVertical: 6, backgroundColor: WHITE,
  },
  winChipActive: { backgroundColor: YELLOW, borderColor: BLACK },
  winChipTxt: { fontSize: 12, fontWeight: "800", color: BLACK },
  winChipTxtActive: { color: BLACK, fontWeight: "900" },

  /* feedback dropdown */
  feedbackWrap: { marginTop: 10, padding: 12, borderRadius: 12, borderWidth: 1.5, borderColor: "#E5E5E5", backgroundColor: "#FAFAFA" },
  formLabel: { fontWeight: "800", color: BLACK, marginBottom: 6, fontSize: 13 },
  input: {
    height: 44, borderWidth: 2, borderColor: BLACK, borderRadius: 10,
    paddingHorizontal: 10, backgroundColor: WHITE, color: BLACK,
  },
  inputMultiline: { height: 92, textAlignVertical: "top" },

  tagsWrap: { flexDirection: "row", flexWrap: "wrap", gap: 8, marginTop: 4 },
  tagChip: {
    borderWidth: 2, borderColor: BLACK, borderRadius: 999,
    paddingHorizontal: 10, paddingVertical: 6, backgroundColor: WHITE,
  },
  tagChipActive: { backgroundColor: YELLOW, borderColor: YELLOW },
  tagText: { fontSize: 12, fontWeight: "800", color: BLACK },
  tagTextActive: { color: BLACK },

  privateNote: { marginTop: 6, fontSize: 12, color: MUTED, fontStyle: "italic" },
  warning: { marginTop: 10, fontSize: 12, color: "#B91C1C", fontWeight: "700", textAlign: "center" },

  submitBtn: {
    marginTop: 12, borderRadius: 10, paddingVertical: 10, alignItems: "center",
    borderWidth: 2, borderColor: BLACK, backgroundColor: YELLOW,
  },
  submitBtnText: { fontWeight: "900", color: BLACK },

  /* Finalize winners bar */
  finalizeBar: {
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderTopWidth: 1,
    borderTopColor: "#EFEFEF",
    backgroundColor: WHITE,
  },
  finalizeBtn: {
    alignSelf: "center",
    flexDirection: "row",
    alignItems: "center",
    gap: 8,
    borderWidth: 2,
    borderColor: BLACK,
    backgroundColor: YELLOW,
    borderRadius: 12,
    paddingHorizontal: 14,
    paddingVertical: 10,
  },
  finalizeTxt: { fontWeight: "900", color: BLACK, fontSize: 14 },
});
