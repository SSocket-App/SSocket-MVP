// App.js
import React, { useMemo, useRef, useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  Platform,
  TouchableOpacity,
  FlatList,
  Pressable,
  Alert,
} from "react-native";
import { Ionicons, MaterialCommunityIcons } from "@expo/vector-icons";

const BLACK = "#000";
const WHITE = "#FFF";
const YELLOW = "#FFD54A";

/** Sample volunteers (replace with real data) */
const VOLUNTEERS = [
  { id: "v1", name: "Anonymous 1", response: "Reconciled POS vs bank settlement; adjusted for timezone offsets; re-ran batches with detailed logging." },
  { id: "v2", name: "Anonymous 2", response: "Checked firmware and network stability; added stabilizer; verified breaker ratings at peak load." },
  { id: "v3", name: "Anonymous 3", response: "Created incident log; compared timestamps; exported raw logs; isolated module before hotfix." },
  { id: "v4", name: "Anonymous 4", response: "Enabled audit trails; rebuilt index; validated merchant fee mappings and cutoff windows." },
];

export default function App() {
  const [winnerId, setWinnerId] = useState(null);
  const [ratings, setRatings] = useState(
    Object.fromEntries(VOLUNTEERS.map(v => [v.id, 0]))
  );

  // volunteers counter
  const threshold = 7;
  const count = VOLUNTEERS.length;

  const data = useMemo(() => VOLUNTEERS, []);
  const listRef = useRef(null);

  const handleRate = (id, n) => {
    setRatings(prev => {
      const curr = prev[id] || 0;
      // tap same star again -> decrease (n-1), else set to n
      const next = (n === curr) ? n - 1 : n;
      return { ...prev, [id]: Math.max(0, Math.min(5, next)) };
    });
  };

  const handleDoubleTap = (id) => {
    setWinnerId(prev => (prev === id ? null : id));
  };

  const renderItem = ({ item }) => (
    <VolunteerCard
      item={item}
      rating={ratings[item.id] || 0}
      isWinner={item.id === winnerId}
      onRate={(n) => handleRate(item.id, n)}
      onDoubleTap={() => handleDoubleTap(item.id)}
    />
  );

  const onPublish = () => {
    if (!winnerId) {
      Alert.alert("Pick a winner", "Double tap a response to select a winner.");
      return;
    }
    const winner = VOLUNTEERS.find(v => v.id === winnerId);
    Alert.alert("Published", `Winner: ${winner?.name || "Unknown"}`);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top bar WITH chat bubble + exclamation */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.backBox} activeOpacity={0.8}>
          <Ionicons name="chevron-back" size={24} color={WHITE} />
        </TouchableOpacity>

        <View style={styles.topCenter}>
          <Text style={styles.topTitle}>Helps</Text>
          <View style={styles.chatIconWrap}>
            <Ionicons name="chatbox-outline" size={20} color={WHITE} />
            <Text style={styles.exMark}>!</Text>
          </View>
          <Text style={styles.topTitle}>Review</Text>
        </View>

        <View style={{ width: 40 }} />
      </View>
      <View style={styles.topAccent} />

      {/* Volunteers counter (top-right, under bar) */}
      <View style={styles.counterWrap}>
        <Text style={styles.counterText}>{count}/{threshold}</Text>
      </View>

      {/* Tip */}
      <View style={styles.tip}>
        <Text style={styles.tipText}>
          Double tap a response and press Publish to pick a winner <Text>ðŸŒŸ</Text>
        </Text>
      </View>

      {/* Scrollable list */}
      <FlatList
        ref={listRef}
        data={data}
        keyExtractor={(i) => i.id}
        renderItem={renderItem}
        contentContainerStyle={{ paddingBottom: 20 }}
        showsVerticalScrollIndicator={false}
      />

      {/* Publish */}
      <View style={styles.publishWrap}>
        <TouchableOpacity
          style={[styles.publishBtn, { opacity: winnerId ? 1 : 0.5 }]}
          onPress={onPublish}
          disabled={!winnerId}
          activeOpacity={0.9}
        >
          <Text style={styles.publishText}>Publish</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

/* ---------- Volunteer Card ---------- */
function VolunteerCard({ item, rating, isWinner, onRate, onDoubleTap }) {
  // double-tap detector (per-card)
  const lastTapRef = useRef(0);
  const onPress = () => {
    const now = Date.now();
    if (now - lastTapRef.current < 300) {
      onDoubleTap();
    }
    lastTapRef.current = now;
  };

  return (
    <Pressable
      onPress={onPress}
      style={[
        styles.card,
        isWinner && { borderColor: YELLOW, backgroundColor: "#FFFDF2" },
      ]}
    >
      <View style={styles.cardHeader}>
        <View style={styles.avatar}>
          <View style={styles.avatarHead} />
          <View style={styles.avatarBody} />
        </View>
        <Text style={styles.name}>{item.name}</Text>
        <Ionicons name="document-text-outline" size={16} color={BLACK} />
      </View>

      {/* Stars (interactive) + Sticker icon on the RIGHT */}
      <View style={styles.starRow}>
        {Array.from({ length: 5 }).map((_, i) => {
          const n = i + 1;
          const filled = n <= rating;
          return (
            <TouchableOpacity
              key={i}
              onPress={() => onRate(n)}
              activeOpacity={0.7}
              style={{ marginRight: 3 }}
            >
              <Ionicons
                name={filled ? "star" : "star-outline"}
                size={20}
                color={YELLOW}
              />
            </TouchableOpacity>
          );
        })}

        {/* WhatsApp-like Sticker icon (to the right of stars) */}
        <MaterialCommunityIcons
          name="sticker-emoji"
          size={20}
          color="#4CAF50"
          style={{ marginLeft: 10 }}
        />
      </View>

      {/* Response text */}
      <View style={styles.responseBox}>
        <Text style={styles.responseText}>{item.response}</Text>
      </View>

      {/* Action row: Save + Share icons */}
      <View style={styles.actionsRow}>
        <TouchableOpacity
          style={styles.actionBtn}
          onPress={() => Alert.alert("Saved", "Answer saved.")}
          activeOpacity={0.8}
        >
          <Ionicons name="bookmark-outline" size={18} color={BLACK} />
          <Text style={styles.actionText}>Save</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.actionBtn}
          onPress={() => Alert.alert("Share", "Open share sheet.")}
          activeOpacity={0.8}
        >
          <Ionicons name="share-social-outline" size={18} color={BLACK} />
          <Text style={styles.actionText}>Share</Text>
        </TouchableOpacity>
      </View>
    </Pressable>
  );
}

/* ----------------- Styles ----------------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  /* Top Bar */
  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    paddingHorizontal: 12,
    paddingBottom: 12,
    flexDirection: "row",
    alignItems: "flex-end",
    justifyContent: "space-between",
  },
  backBox: { width: 40, height: 36, justifyContent: "center" },

  topCenter: { flexDirection: "row", alignItems: "center", gap: 8 },
  topTitle: { color: WHITE, fontSize: 22, fontWeight: "900" },

  // chatbox with "!" overlay
  chatIconWrap: {
    position: "relative",
    width: 22,
    height: 20,
    alignItems: "center",
    justifyContent: "center",
  },
  exMark: {
    position: "absolute",
    top: -2,
    left: 8,
    color: WHITE,
    fontWeight: "900",
    fontSize: 12,
  },

  topAccent: { height: 3, backgroundColor: YELLOW },

  /* counter */
  counterWrap: {
    alignItems: "flex-end",
    paddingHorizontal: 12,
    paddingTop: 6,
    paddingBottom: 2,
  },
  counterText: { color: BLACK, fontWeight: "800" },

  /* tip */
  tip: { paddingHorizontal: 12, paddingVertical: 8 },
  tipText: { color: "#444", fontSize: 13 },

  /* card */
  card: {
    marginHorizontal: 12,
    marginVertical: 8,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    padding: 10,
    backgroundColor: WHITE,
  },
  cardHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 8,
  },
  avatar: {
    width: 34, height: 34, borderRadius: 17,
    borderWidth: 2, borderColor: BLACK,
    alignItems: "center", justifyContent: "center",
    backgroundColor: WHITE, marginRight: 8,
  },
  avatarHead: {
    width: 9, height: 9, borderRadius: 4.5,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE, marginBottom: 1,
  },
  avatarBody: {
    width: 14, height: 7, borderRadius: 5,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
  },
  name: { flex: 1, marginLeft: 8, color: BLACK, fontSize: 16, fontWeight: "800" },

  /* stars + sticker */
  starRow: { flexDirection: "row", alignItems: "center", marginBottom: 10 },

  /* response */
  responseBox: {
    borderWidth: 1,
    borderColor: "#E5E5E5",
    borderRadius: 8,
    padding: 10,
    backgroundColor: "#FAFAFA",
  },
  responseText: { color: "#333", fontSize: 13 },

  /* actions */
  actionsRow: {
    flexDirection: "row",
    alignItems: "center",
    gap: 12,
    marginTop: 10,
  },
  actionBtn: {
    flexDirection: "row",
    alignItems: "center",
    gap: 6,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 6,
    backgroundColor: WHITE,
  },
  actionText: { color: BLACK, fontWeight: "800", fontSize: 12 },

  /* publish */
  publishWrap: { paddingHorizontal: 12, paddingVertical: 10 },
  publishBtn: {
    height: 44,
    borderRadius: 10,
    backgroundColor: BLACK,
    alignItems: "center",
    justifyContent: "center",
  },
  publishText: { color: WHITE, fontWeight: "900", fontSize: 16 },
});

