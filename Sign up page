// App.js — SSocket Standalone Sign Up (Expo Snack ready, no deps)

import React, { useState } from "react";
import {
  SafeAreaView,
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  StatusBar,
  KeyboardAvoidingView,
  Platform,
  Alert,
  Image,
} from "react-native";

// Optional: paste your base64 wordmark between the backticks to show your logo
const WORDMARK_PNG = ``;

const YELLOW = "#FFD233";
const BLACK = "#000000";
const TEXT = "#111111";
const MUTED = "#9aa0a6";
const BG = "#ffffff";
const CARD = "#ffffff";
const BDR = "#e5e7eb";

export default function App() {
  StatusBar.setBarStyle("dark-content");

  return (
    <SafeAreaView style={styles.safe}>
      <KeyboardAvoidingView
        style={{ flex: 1 }}
        behavior={Platform.OS === "ios" ? "padding" : undefined}
      >
        <View style={styles.container}>
          {WORDMARK_PNG ? (
            <Image
              source={{ uri: `data:image/png;base64,${WORDMARK_PNG}` }}
              style={styles.wordmarkImg}
              resizeMode="contain"
              accessible
              accessibilityLabel="SSocket"
            />
          ) : (
            <Text
              style={{
                fontSize: 28,
                fontWeight: "900",
                letterSpacing: 0.5,
                color: TEXT,
                marginBottom: 6,
              }}
            >
              SSocket
            </Text>
          )}

          <SignUpScreen />
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

function SignUpScreen() {
  // fields
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName]   = useState("");
  const [email, setEmail]         = useState("");
  const [pwd, setPwd]             = useState("");
  const [confirmPwd, setConfirmPwd] = useState("");

  // ui
  const [showPwd, setShowPwd] = useState(false);
  const [showConfirmPwd, setShowConfirmPwd] = useState(false);
  const [agree, setAgree] = useState(false);
  const [loading, setLoading] = useState(false);

  // errors
  const [errors, setErrors] = useState({
    firstName: "",
    lastName: "",
    email: "",
    pwd: "",
    confirmPwd: "",
    agree: "",
  });

  const validatePassword = (password) => {
    const minLength = /.{8,}/;
    const upperCase = /[A-Z]/;
    const lowerCase = /[a-z]/;
    const number = /[0-9]/;
    const specialChar = /[!@#$%^&*(),.?":{}|<>]/;

    if (!minLength.test(password)) return "At least 8 characters";
    if (!upperCase.test(password)) return "Include an uppercase letter";
    if (!lowerCase.test(password)) return "Include a lowercase letter";
    if (!number.test(password)) return "Include a number";
    if (!specialChar.test(password)) return "Include a special character";
    return "";
  };

  const createAccount = () => {
    const next = { firstName: "", lastName: "", email: "", pwd: "", confirmPwd: "", agree: "" };
    if (!firstName.trim()) next.firstName = "Enter your first name";
    if (!lastName.trim())  next.lastName  = "Enter your last name";
    if (!email.includes("@")) next.email = "Enter a valid email";

    const pwdErr = validatePassword(pwd);
    if (pwdErr) next.pwd = pwdErr;

    if (confirmPwd !== pwd) next.confirmPwd = "Passwords do not match";
    if (!agree) next.agree = "You must agree to the Terms";

    setErrors(next);

    const hasErrors =
      next.firstName || next.lastName || next.email || next.pwd || next.confirmPwd || next.agree;

    if (hasErrors) return;

    // Demo: pretend to create
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      Alert.alert("SSocket", "Account created (demo).");
    }, 700);
  };

  return (
    <View style={styles.card}>
      <View style={{ alignItems: "center", marginBottom: 6 }}>
        <Text style={styles.title}>Create your account</Text>
        <Text style={styles.subtitle}>Join SSocket in seconds</Text>
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>First name</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={firstName}
          onChangeText={setFirstName}
          autoCapitalize="words"
          style={styles.input}
        />
        {errors.firstName ? <Text style={styles.error}>{errors.firstName}</Text> : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Last name</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={lastName}
          onChangeText={setLastName}
          autoCapitalize="words"
          style={styles.input}
        />
        {errors.lastName ? <Text style={styles.error}>{errors.lastName}</Text> : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Email</Text>
        <TextInput
          placeholder=""
          placeholderTextColor="#9aa0a6"
          value={email}
          onChangeText={setEmail}
          autoCapitalize="none"
          keyboardType="email-address"
          style={styles.input}
        />
        {errors.email ? <Text style={styles.error}>{errors.email}</Text> : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Password</Text>
        <View style={{ position: "relative" }}>
          <TextInput
            placeholder=""
            placeholderTextColor="#9aa0a6"
            value={pwd}
            onChangeText={setPwd}
            secureTextEntry={!showPwd}
            style={[styles.input, { paddingRight: 56 }]}
          />
          <TouchableOpacity
            onPress={() => setShowPwd((v) => !v)}
            style={styles.eyeBtn}
            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
            accessibilityRole="button"
            accessibilityLabel={showPwd ? "Hide password" : "Show password"}
          >
            <EyeIcon open={showPwd} />
          </TouchableOpacity>
        </View>
        <Text style={styles.hint}>
          At least 8 characters, including 1 uppercase, 1 lowercase, 1 number, and 1 special
          character.
        </Text>
        {errors.pwd ? <Text style={styles.error}>{errors.pwd}</Text> : null}
      </View>

      <View style={styles.field}>
        <Text style={styles.label}>Confirm password</Text>
        <View style={{ position: "relative" }}>
          <TextInput
            placeholder=""
            placeholderTextColor="#9aa0a6"
            value={confirmPwd}
            onChangeText={setConfirmPwd}
            secureTextEntry={!showConfirmPwd}
            style={[styles.input, { paddingRight: 56 }]}
          />
          <TouchableOpacity
            onPress={() => setShowConfirmPwd((v) => !v)}
            style={styles.eyeBtn}
            hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}
            accessibilityRole="button"
            accessibilityLabel={showConfirmPwd ? "Hide password" : "Show password"}
          >
            <EyeIcon open={showConfirmPwd} />
          </TouchableOpacity>
        </View>
        {errors.confirmPwd ? <Text style={styles.error}>{errors.confirmPwd}</Text> : null}
      </View>

      <TouchableOpacity
        onPress={() => setAgree((v) => !v)}
        style={styles.termsRow}
        activeOpacity={0.8}
      >
        <View style={[styles.checkbox, agree && styles.checkboxChecked]} />
        <Text style={styles.termsText}>
          I agree to the <Text style={styles.link}>Terms</Text> &{" "}
          <Text style={styles.link}>Privacy Policy</Text>
        </Text>
      </TouchableOpacity>
      {errors.agree ? <Text style={styles.error}>{errors.agree}</Text> : null}

      <TouchableOpacity onPress={createAccount} activeOpacity={0.85} style={styles.cta}>
        <Text style={styles.ctaText}>{loading ? "Creating..." : "Create account ⚡"}</Text>
      </TouchableOpacity>
    </View>
  );
}

/* ---------- Simple Icon (eye / eye with slash) ---------- */
function EyeIcon({ open }) {
  return (
    <View style={eyeStyles.wrapper}>
      <View style={eyeStyles.oval} />
      {open ? <View style={eyeStyles.pupil} /> : <View style={eyeStyles.slash} />}
    </View>
  );
}

const eyeStyles = StyleSheet.create({
  wrapper: {
    width: 32,
    height: 32,
    alignItems: "center",
    justifyContent: "center",
  },
  oval: {
    width: 22,
    height: 14,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: "#111",
  },
  pupil: {
    position: "absolute",
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: "#111",
  },
  slash: {
    position: "absolute",
    width: 2,
    height: 18,
    backgroundColor: "#111",
    transform: [{ rotate: "45deg" }],
  },
});

/* --------------------------- Styles --------------------------- */

const styles = StyleSheet.create({
  safe: { flex: 1, backgroundColor: BG },
  container: {
    flex: 1,
    paddingHorizontal: 22,
    paddingTop: 24,
    alignItems: "center",
    justifyContent: "center",
    gap: 16,
    backgroundColor: BG,
  },
  wordmarkImg: { width: 260, height: 80, marginBottom: 6 },

  card: {
    width: "100%",
    backgroundColor: CARD,
    borderRadius: 16,
    borderWidth: StyleSheet.hairlineWidth,
    borderColor: BDR,
    padding: 16,
    gap: 14,
    elevation: 6,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 12,
    shadowOffset: { width: 0, height: 6 },
  },

  title: { fontSize: 22, fontWeight: "800", color: TEXT },
  subtitle: { marginTop: 2, fontSize: 14, color: MUTED },

  field: { gap: 6 },
  label: { fontSize: 13, color: TEXT, fontWeight: "700" },
  input: {
    height: 48,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: BDR,
    paddingHorizontal: 14,
    fontSize: 16,
    color: TEXT,
    backgroundColor: "#fff",
  },

  eyeBtn: { position: "absolute", right: 10, top: 8, width: 32, height: 32 },

  termsRow: { flexDirection: "row", alignItems: "center", gap: 10, marginTop: 2 },
  checkbox: {
    width: 18,
    height: 18,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: "#525252",
    backgroundColor: "transparent",
  },
  checkboxChecked: { backgroundColor: "#111" },
  termsText: { color: TEXT, fontSize: 13 },
  link: { color: TEXT, fontWeight: "800", textDecorationLine: "underline" },

  hint: { color: MUTED, fontSize: 12, marginTop: 4 },

  cta: {
    height: 50,
    borderRadius: 14,
    backgroundColor: BLACK,
    alignItems: "center",
    justifyContent: "center",
    marginTop: 4,
  },
  ctaText: { color: "#fff", fontSize: 16.5, fontWeight: "800", letterSpacing: 0.3 },

  error: { color: "#b00020", fontSize: 12, marginTop: 4 },
});
