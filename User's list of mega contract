// SSocketContractorMegaContracts.js 
// One page with a top title "Contractor Mega Contracts" and a toggle:
// - Contract List  → ongoing + ended mega contracts (with "Achievement List" buttons)
// - Pending Contract → single pending mega contract card
// No external libs besides @expo/vector-icons. Avoids RN "gap" for compatibility.

import React, { useMemo, useState } from "react";
import {
  SafeAreaView,
  StatusBar,
  View,
  Text,
  StyleSheet,
  Platform,
  TouchableOpacity,
  Image,
  Alert,
  ScrollView,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const YELLOW = "#FFD54A";
const BLACK = "#000";
const WHITE = "#FFF";

/* -------------------- Helpers -------------------- */
function formatMoney(n) {
  const x = Number(n);
  if (Number.isNaN(x)) return "—";
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
function periodToReadable(p) {
  if (!p) return "";
  const v = String(p).toLowerCase();
  if (v.startsWith("week")) return "week";
  if (v.startsWith("mon")) return "month";
  if (v.startsWith("proj") || v === "on_completion") return "project";
  if (v.startsWith("mile")) return "milestone";
  return v;
}

/* -------------------- Page -------------------- */
export default function SSocketContractorMegaContracts({
  // Optional props for wiring into navigation
  onBack,
  onOpenAchievementsPage, // (contractObj) => void
  onOpenPending,          // (pendingContractObj) => void
  activeContract,         // optional: pass active mega contract object
  endedContracts,         // optional: pass array of ended mega contracts
  pendingContract,        // optional: pass single pending mega contract
}) {
  /* ===== Demo data fallbacks ===== */
  const demoActive = useMemo(
    () => ({
      id: "sc_me_mine",
      contracteeName: "Ada Ventures Ltd",     // BUSINESS NAME (shown)
      contractorName: "Ada Ventures Ltd",     // kept for data, not shown
      jobRole: "Marketing Specialist",
      workDescription:
        "Lead generation campaigns, weekly performance report, and monthly growth experiments.",
      startDate: "2025-06-01",
      endDate: "2025-12-01",
      salary: 450000,
      paymentPeriod: "month",
      avatarUrl: "",
      ongoing: true,
    }),
    []
  );

  const demoEnded = useMemo(
    () => [
      {
        id: "sc_ended_01",
        contracteeName: "BrightLabs",         // BUSINESS NAME (shown)
        contractorName: "BrightLabs",
        jobRole: "QA Engineer",
        workDescription: "Mobile QA with weekly reports and release certifications.",
        startDate: "2024-01-10",
        endDate: "2024-09-30",
        salary: 300000,
        paymentPeriod: "month",
        avatarUrl: "",
        ongoing: false,
      },
      {
        id: "sc_ended_02",
        contracteeName: "Nova Foods",         // BUSINESS NAME (shown)
        contractorName: "Nova Foods",
        jobRole: "Brand Designer",
        workDescription: "Packaging refresh across 4 SKUs + print-ready assets.",
        startDate: "2023-02-01",
        endDate: "2023-08-01",
        salary: 500000,
        paymentPeriod: "project",
        avatarUrl: "",
        ongoing: false,
      },
    ],
    []
  );

  const demoPending = useMemo(
    () => ({
      id: "mc_201",
      contracteeName: "Ada Ventures Ltd",     // BUSINESS NAME (shown)
      contractorName: "Ada Ventures Ltd",
      jobRole: "Accountant",
      workDescription: "Monthly accounts reconciliation and payroll processing",
      startDate: "2025-09-01",
      endDate: "2025-12-01",
      salary: 350000,
      paymentPeriod: "month", // week | month | project | milestone | on_completion
      lastMessage: "Please confirm Friday 4pm for weekly update.",
      updatedAt: "2025-08-20",
      unread: 2,
      status: "Negotiation",
    }),
    []
  );

  const active = activeContract || demoActive;
  const ended = (endedContracts && endedContracts.length ? endedContracts : demoEnded) || [];
  const pending = pendingContract || demoPending;

  const [tab, setTab] = useState("list"); // 'list' | 'pending'

  const goBack = () => {
    if (typeof onBack === "function") onBack();
    else Alert.alert("Back", "Hook this into navigation.");
  };

  const openAchievementsPage = (c) => {
    if (typeof onOpenAchievementsPage === "function") onOpenAchievementsPage(c || active);
    else Alert.alert("Open", "Wire this to your Achievements page.");
  };

  const openPending = () => {
    if (!pending) return;
    if (typeof onOpenPending === "function") onOpenPending(pending);
    else Alert.alert("Open", `Open contract with ${pending.contracteeName}`);
  };

  /* -------------------- Renders -------------------- */
  const renderActiveCard = (c) => (
    <View key={c.id} style={styles.barrier}>
      <View style={styles.card}>
        {/* Header: avatar + ONLY BUSINESS NAME + badge */}
        <View style={styles.headerRow}>
          <View style={styles.headerLeft}>
            {c.avatarUrl ? (
              <Image source={{ uri: c.avatarUrl }} style={styles.avatarImg} />
            ) : (
              <View style={styles.avatarMono}>
                <Text style={styles.avatarMonoTxt}>
                  {(c.contracteeName || "?").slice(0, 1).toUpperCase()}
                </Text>
              </View>
            )}
            <View style={{ marginLeft: 10 }}>
              {/* Show ONLY business name */}
              <Text style={styles.name} numberOfLines={1}>
                {c.contracteeName}
              </Text>
            </View>
          </View>
          <View
            style={[
              styles.badgeChip,
              { backgroundColor: c.ongoing ? YELLOW : "#EEE" },
            ]}
          >
            <Text
              style={[
                styles.badgeChipTxt,
                !c.ongoing && { color: BLACK },
              ]}
            >
              {c.ongoing ? "Ongoing" : "Ended"}
            </Text>
          </View>
        </View>

        {/* Role */}
        <View style={styles.roleBox}>
          <Text style={styles.roleLabel}>Job Role</Text>
          <Text style={styles.roleValue}>{c.jobRole || "—"}</Text>
        </View>

        {/* Description */}
        <Text style={styles.desc}>{c.workDescription}</Text>

        {/* Meta */}
        <View style={styles.metaRow}>
          <View style={styles.badgeOutline}>
            <Text style={styles.badgeOutlineTxt}>
              {`NGN ${formatMoney(c.salary)} per ${periodToReadable(c.paymentPeriod)}`}
            </Text>
          </View>
          <View style={[styles.badgeOutline, { marginLeft: 8 }]}>
            <Text style={styles.badgeOutlineTxt}>Start: {c.startDate || "—"}</Text>
          </View>
          <View style={[styles.badgeOutline, { marginLeft: 8 }]}>
            <Text style={styles.badgeOutlineTxt}>End: {c.endDate || "—"}</Text>
          </View>
        </View>

        {/* Yellow button to open Achievements page */}
        <TouchableOpacity
          style={[styles.btn, styles.btnYellow, { alignSelf: "flex-start", marginTop: 10 }]}
          activeOpacity={0.9}
          onPress={() => openAchievementsPage(c)}
        >
          <Ionicons name="list-outline" size={16} color={BLACK} />
          <Text style={[styles.btnYellowTxt, { marginLeft: 6 }]}>Achievement List</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderListTab = () => (
    <ScrollView contentContainerStyle={{ paddingBottom: 24 }}>
      {/* ACTIVE (ONGOING) — show single active card */}
      {renderActiveCard(active)}

      {/* ENDED contracts section */}
      <Text style={[styles.h2, { marginHorizontal: 12, marginTop: 16 }]}>Ended Mega Contracts</Text>

      {ended.length === 0 ? (
        <Text style={[styles.emptyText, { marginHorizontal: 12 }]}>No ended contracts.</Text>
      ) : (
        ended.map((c) => renderActiveCard({ ...c, ongoing: false }))
      )}
    </ScrollView>
  );

  const renderPendingTab = () => (
    <ScrollView contentContainerStyle={{ paddingBottom: 20 }}>
      {!pending ? (
        <View style={[styles.emptyWrap, { paddingHorizontal: 12 }]}>
          <Text style={styles.emptyText}>No pending mega contract.</Text>
        </View>
      ) : (
        <View style={{ paddingHorizontal: 12 }}>
          {/* Single Pending Contract Card */}
          <View style={[styles.card, { flexDirection: "row", alignItems: "flex-start" }]}>
            {/* Avatar-ish block */}
            <View style={styles.avatar}>
              <View style={styles.avatarHead} />
              <View style={styles.avatarBody} />
            </View>

            {/* Details */}
            <View style={{ flex: 1, marginLeft: 12 }}>
              {/* ONLY Business Name */}
              <Text style={styles.name} numberOfLines={1}>
                {pending.contracteeName}
              </Text>

              {/* Role */}
              <View style={styles.roleBox}>
                <Text style={styles.roleLabel}>Job Role</Text>
                <Text style={styles.roleValue}>{pending.jobRole || "—"}</Text>
              </View>

              {/* Scope */}
              <Text style={styles.desc} numberOfLines={3}>
                {pending.workDescription}
              </Text>

              {/* Meta row: status + exact pay + unread */}
              <View style={[styles.metaRow, { marginTop: 8 }]}>
                <View style={styles.badgeYellowSmall}>
                  <Text style={styles.badgeYellowText}>{pending.status || "Negotiation"}</Text>
                </View>
                <View style={[styles.badgeOutline, { marginLeft: 8 }]}>
                  <Text style={styles.badgeOutlineTxt}>
                    {`NGN ${formatMoney(pending.salary)} per ${periodToReadable(pending.paymentPeriod)}`}
                  </Text>
                </View>
                {pending.unread > 0 && (
                  <View style={[styles.badgeUnread, { marginLeft: 8 }]}>
                    <Text style={styles.badgeUnreadText}>{pending.unread}</Text>
                  </View>
                )}
              </View>

              {/* Key-Value grid (Contractor row REMOVED so only business name shows) */}
              <View style={styles.kvGrid}>
                <KV label="Start Date" value={pending.startDate} />
                <KV label="End / Deadline" value={pending.endDate} />
                <KV label="Payment Period" value={periodToReadable(pending.paymentPeriod)} />
              </View>

              {/* Last message + updated */}
              <Text style={styles.lastMsg} numberOfLines={2}>
                <Text style={{ fontWeight: "900" }}>Last:</Text> {pending.lastMessage || "No messages yet"}
              </Text>
              <Text style={styles.updatedAt}>Updated: {pending.updatedAt || "—"}</Text>
            </View>

            {/* Action */}
            <TouchableOpacity
              activeOpacity={0.9}
              style={[styles.btn, styles.btnYellow, { marginLeft: 12 }]}
              onPress={openPending}
            >
              <Ionicons name="open-outline" size={16} color={BLACK} />
              <Text style={[styles.btnYellowTxt, { marginLeft: 6 }]}>Open</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </ScrollView>
  );

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={BLACK} />

      {/* Top Bar */}
      <View style={styles.topBar}>
        <TouchableOpacity style={styles.backBtn} activeOpacity={0.85} onPress={goBack}>
          <Ionicons name="arrow-back-outline" size={22} color={WHITE} />
        </TouchableOpacity>
        <Text style={styles.topTitle}>Contractor Mega Contracts</Text>
        <View style={{ width: 40 }} />
      </View>
      <View style={styles.topAccent} />

      {/* Toggle */}
      <View style={styles.toggleRow}>
        <TouchableOpacity
          activeOpacity={0.9}
          onPress={() => setTab("list")}
          style={[styles.toggleBtn, tab === "list" && styles.toggleBtnActive]}
        >
          <Text style={[styles.toggleTxt, tab === "list" && styles.toggleTxtActive]}>
            Contract List
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          activeOpacity={0.9}
          onPress={() => setTab("pending")}
          style={[styles.toggleBtn, tab === "pending" && styles.toggleBtnActive]}
        >
          <Text style={[styles.toggleTxt, tab === "pending" && styles.toggleTxtActive]}>
            Pending Contract
          </Text>
        </TouchableOpacity>
      </View>

      {/* Content */}
      {tab === "list" ? renderListTab() : renderPendingTab()}
    </SafeAreaView>
  );
}

/* -------------------- Small pieces -------------------- */
function KV({ label, value }) {
  return (
    <View style={styles.kvItem}>
      <Text style={styles.kvLabel}>{label}</Text>
      <Text style={styles.kvValue} numberOfLines={1}>
        {value || "—"}
      </Text>
    </View>
  );
}

/* -------------------- Styles -------------------- */
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: WHITE },

  /* Top */
  topBar: {
    backgroundColor: BLACK,
    height: 88,
    paddingTop: Platform.OS === "android" ? (StatusBar.currentHeight || 0) : 12,
    alignItems: "center",
    justifyContent: "flex-end",
    paddingBottom: 14,
    position: "relative",
  },
  backBtn: { position: "absolute", left: 12, bottom: 14, padding: 6 },
  topTitle: { color: WHITE, fontSize: 20, fontWeight: "900" },
  topAccent: { height: 3, backgroundColor: YELLOW },

  /* Toggle */
  toggleRow: {
    flexDirection: "row",
    marginTop: 10,
    paddingHorizontal: 12,
  },
  toggleBtn: {
    flex: 1,
    alignItems: "center",
    paddingVertical: 10,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    backgroundColor: WHITE,
    marginHorizontal: 4,
  },
  toggleBtnActive: { backgroundColor: YELLOW, borderColor: YELLOW },
  toggleTxt: { color: BLACK, fontWeight: "800" },
  toggleTxtActive: { color: BLACK },

  /* Yellow barrier for cards in List tab */
  barrier: {
    marginTop: 12,
    marginHorizontal: 12,
    borderWidth: 3,
    borderColor: YELLOW,
    borderRadius: 16,
    padding: 4,
    backgroundColor: WHITE,
  },

  /* Card */
  card: {
    backgroundColor: WHITE,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 12,
    padding: 12,
  },

  /* Header */
  headerRow: { flexDirection: "row", alignItems: "center", justifyContent: "space-between" },
  headerLeft: { flexDirection: "row", alignItems: "center" },
  avatarImg: { width: 40, height: 40, borderRadius: 20, borderWidth: 2, borderColor: BLACK },
  avatarMono: {
    width: 40, height: 40, borderRadius: 20,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
    alignItems: "center", justifyContent: "center",
  },
  avatarMonoTxt: { color: BLACK, fontWeight: "900", fontSize: 16 },
  name: { color: BLACK, fontSize: 16, fontWeight: "900" },
  subName: { color: "#444", fontSize: 12, marginTop: 2 }, // (unused now — kept to avoid touching styles)

  badgeChip: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 999,
    borderWidth: 2,
    borderColor: BLACK,
    alignSelf: "flex-start",
  },
  badgeChipTxt: { color: BLACK, fontSize: 12, fontWeight: "900" },

  /* Role & Desc */
  roleBox: {
    marginTop: 10,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 6,
    alignSelf: "flex-start",
    backgroundColor: WHITE,
  },
  roleLabel: { color: "#444", fontSize: 10, fontWeight: "900" },
  roleValue: { color: BLACK, fontSize: 13, fontWeight: "900", marginTop: 1 },
  desc: { color: "#333", fontSize: 12, marginTop: 8 },

  metaRow: { flexDirection: "row", alignItems: "center", flexWrap: "wrap", marginTop: 8 },
  badgeOutline: {
    paddingHorizontal: 8,
    paddingVertical: 3,
    borderRadius: 6,
    backgroundColor: WHITE,
    borderWidth: 2,
    borderColor: BLACK,
  },
  badgeOutlineTxt: { color: BLACK, fontSize: 12, fontWeight: "800" },

  /* Buttons */
  btn: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: BLACK,
    flexDirection: "row",
    alignItems: "center",
  },
  btnYellow: { backgroundColor: YELLOW },
  btnYellowTxt: { color: BLACK, fontWeight: "900", fontSize: 12 },

  /* Subheader */
  h2: { color: BLACK, fontSize: 16, fontWeight: "900" },

  /* Empty */
  emptyWrap: { marginTop: 40, alignItems: "center", justifyContent: "center" },
  emptyText: { color: "#666", fontWeight: "600" },

  /* Pending-specific small bits */
  avatar: {
    width: 46, height: 46, borderRadius: 23,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
    alignItems: "center", justifyContent: "center",
  },
  avatarHead: {
    width: 12, height: 12, borderRadius: 6,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE, marginBottom: 2,
  },
  avatarBody: {
    width: 22, height: 10, borderRadius: 6,
    borderWidth: 2, borderColor: BLACK, backgroundColor: WHITE,
  },

  badgeYellowSmall: {
    paddingHorizontal: 8, paddingVertical: 3, borderRadius: 6, backgroundColor: YELLOW,
    borderWidth: 2, borderColor: BLACK,
  },
  badgeYellowText: { color: BLACK, fontSize: 12, fontWeight: "800" },

  badgeUnread: {
    paddingHorizontal: 8, paddingVertical: 3, borderRadius: 999, backgroundColor: WHITE,
    borderWidth: 2, borderColor: BLACK, minWidth: 28, alignItems: "center",
  },
  badgeUnreadText: { color: BLACK, fontSize: 12, fontWeight: "900" },

  kvGrid: {
    marginTop: 8,
    borderWidth: 2,
    borderColor: BLACK,
    borderRadius: 10,
    padding: 10,
    backgroundColor: WHITE,
  },
  kvItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    marginTop: 6,
  },
  kvLabel: { color: "#444", fontSize: 11, fontWeight: "900", marginRight: 10 },
  kvValue: { color: BLACK, fontSize: 12, fontWeight: "700", flexShrink: 1, textAlign: "right" },

  lastMsg: { color: "#444", fontSize: 11, marginTop: 8 },
  updatedAt: { color: "#777", fontSize: 10, marginTop: 2 },
});
