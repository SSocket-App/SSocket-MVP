// App.js — SSocket Feed + Help (Instagram-like WHITE icons + visible action icons)
// Fix: Feed action icons were white on white (invisible). Added tiny black circular plates behind them
// so they stay white but visible. Only icon shapes/colors + visibility plates changed.

import React, { useMemo, useState } from "react";
import {
  SafeAreaView,
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  StatusBar,
  KeyboardAvoidingView,
  Platform,
  FlatList,
  ScrollView,
} from "react-native";

/* -------------------- Theme -------------------- */
const COLOR = {
  black: "#000000",
  white: "#ffffff",
  text: "#111111",
  muted: "#6b7280",
  border: "#e5e7eb",
  yellow: "#FFD233",
  bg: "#ffffff",
  card: "#ffffff",
};
const RADIUS = 16;

/* -------------------- Root -------------------- */
export default function App() {
  const [tab, setTab] = useState("feed"); // feed | employer | contacts | notifications | profile
  const [screen, setScreen] = useState("feed"); // feed | helpCreate | helpDetail
  const [activeHelp, setActiveHelp] = useState(null);
  const [isRequester, setIsRequester] = useState(false);

  const openHelpCreate = () => setScreen("helpCreate");
  const openHelpDetailAsVolunteer = (help) => {
    setIsRequester(false);
    setActiveHelp(help);
    setScreen("helpDetail");
  };
  const openHelpDetailAsRequester = (help) => {
    setIsRequester(true);
    setActiveHelp(help);
    setScreen("helpDetail");
  };

  // fake feed data
  const posts = useMemo(
    () => [
      { id: "p1", name: "Anonymous Pro", caption: "We moved a legacy app to microservices. AMA", hasImage: true },
      { id: "p2", name: "Factory Crew", caption: "Tip: Label your tools. Saves hours every week.", hasImage: false },
      { id: "p3", name: "HR Helper", caption: "Interview structure that cut no‑shows by 60%.", hasImage: true },
    ],
    []
  );

  // fake help cards (horizontal)
  const [helpCards, setHelpCards] = useState([
    { id: "new", type: "create" },
    { id: "h1", type: "help", title: "POS not balancing", limit: 7, taken: 2, category: "Accounting" },
    { id: "h2", type: "help", title: "Generator keeps tripping", limit: 5, taken: 3, category: "Maintenance" },
    { id: "h3", type: "help", title: "UI not responsive", limit: 13, taken: 9, category: "Coding" },
  ]);

  const onCreateHelp = (payload) => {
    const obj = {
      id: `h_${Date.now()}`,
      type: "help",
      title: payload.title,
      details: payload.details,
      limit: Number(payload.limit || 5),
      taken: 0,
      solutions: [],
      winnerId: null,
      category: payload.category || "General",
    };
    setHelpCards((prev) => [prev[0], obj, ...prev.slice(1)]);
    openHelpDetailAsRequester(obj);
  };

  const onSubmitSolution = (help, text) => {
    if (!text.trim()) return;
    const entry = {
      id: `s_${Date.now()}`,
      content: text.trim(),
      rating: 0,
      tags: [],
      authorHidden: true,
    };
    setHelpCards((prev) =>
      prev.map((h) =>
        h.id === help.id
          ? { ...h, solutions: [entry, ...(h.solutions || [])], taken: Math.min((h.taken || 0) + 1, h.limit) }
          : h
      )
    );
  };

  const updateSolution = (help, solutionId, patch) => {
    setHelpCards((prev) =>
      prev.map((h) => {
        if (h.id !== help.id) return h;
        const solutions = (h.solutions || []).map((s) => (s.id === solutionId ? { ...s, ...patch } : s));
        return { ...h, solutions };
      })
    );
  };
  const chooseWinner = (help, solutionId) => {
    setHelpCards((prev) => prev.map((h) => (h.id === help.id ? { ...h, winnerId: solutionId } : h)));
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: COLOR.bg }}>
      <StatusBar barStyle="light-content" backgroundColor={COLOR.black} />
      <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === "ios" ? "padding" : undefined}>
        {/* Top bar */}
        <TopBar onPressChat={() => {}} onPressSearch={() => {}} onAttachImage={() => {}} />

        {/* Main content */}
        <View style={{ flex: 1 }}>
          {screen === "feed" && (
            <FeedScreen
              posts={posts}
              helpCards={helpCards}
              onTapRequestHelp={openHelpCreate}
              onTapHelp={(h) => openHelpDetailAsVolunteer(h)}
            />
          )}
          {screen === "helpCreate" && <HelpCreateScreen onBack={() => setScreen("feed")} onSubmit={onCreateHelp} />}
          {screen === "helpDetail" && activeHelp && (
            <HelpDetailScreen
              help={helpCards.find((h) => h.id === activeHelp.id) || activeHelp}
              onBack={() => {
                setScreen("feed");
                setActiveHelp(null);
                setIsRequester(false);
              }}
              isRequester={isRequester}
              onSubmitSolution={onSubmitSolution}
              onRate={(sid, r) => updateSolution(activeHelp, sid, { rating: r })}
              onTag={(sid, tag) => {
                const help = helpCards.find((h) => h.id === activeHelp.id);
                const target = (help?.solutions || []).find((s) => s.id === sid);
                const tags = target ? Array.from(new Set([...(target.tags || []), tag])) : [tag];
                updateSolution(activeHelp, sid, { tags });
              }}
              onPickWinner={(sid) => chooseWinner(activeHelp, sid)}
            />
          )}
        </View>

        {/* Bottom Tabs (unchanged layout; icons white) */}
        <BottomTabs
          active={tab}
          onChange={(t) => {
            setTab(t);
            if (t === "feed") setScreen("feed");
          }}
        />
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

/* -------------------- Top Bar -------------------- */
function TopBar({ onPressChat, onPressSearch, onAttachImage }) {
  return (
    <View style={styles.topbarWrap}>
      <View style={styles.topRow}>
        {/* LEFT cluster */}
        <View style={{ flexDirection: "row", alignItems: "center" }}>
          <View style={{ alignItems: "center" }}>
            <View style={styles.avatar}>
              <Text style={{ color: COLOR.black, fontWeight: "900" }}>U</Text>
            </View>
            <Text style={styles.rankName}>[Rank Name]</Text>
            <Text style={styles.rankType}>Electric</Text>
          </View>
          <View style={styles.rankBar}>
            <View style={[styles.rankFill, { width: "45%" }]} />
            <Text style={styles.rankPct}>45%</Text>
          </View>
        </View>

        {/* BRAND */}
        <Text style={styles.brand}>SSOCKET</Text>

        {/* RIGHT actions */}
        <View style={styles.actionRight}>
          <TouchableOpacity onPress={onPressChat} activeOpacity={0.8}>
            <IconDM color={COLOR.white} />
          </TouchableOpacity>
          <TouchableOpacity onPress={onPressSearch} activeOpacity={0.8}>
            <IconSearchIG color={COLOR.white} />
          </TouchableOpacity>
        </View>
      </View>

      {/* Post box */}
      <View style={styles.postRow}>
        <TextInput
          placeholder="What problem have you solved?"
          placeholderTextColor="#d1d5db"
          style={styles.postInput}
        />
        <TouchableOpacity onPress={onAttachImage} activeOpacity={0.85} style={styles.attachBtn}>
          <IconAddImageIG color={COLOR.white} />
        </TouchableOpacity>
      </View>
    </View>
  );
}

/* -------------------- Feed Screen -------------------- */
function FeedScreen({ posts, helpCards, onTapRequestHelp, onTapHelp }) {
  return (
    <FlatList
      data={posts}
      keyExtractor={(it) => it.id}
      ListHeaderComponent={
        <View style={{ paddingHorizontal: 16, paddingTop: 10 }}>
          <Text style={styles.sectionTitle}>Help</Text>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{ paddingVertical: 8, gap: 12 }}>
            <TouchableOpacity
              activeOpacity={0.9}
              onPress={onTapRequestHelp}
              style={[styles.helpCard, { backgroundColor: "#fef3c7", borderColor: "#fde68a" }]}
            >
              <Text style={{ color: COLOR.text, fontWeight: "800" }}>Request{"\n"}a help?</Text>
            </TouchableOpacity>
            {helpCards.filter((h) => h.type === "help").map((h) => (
              <TouchableOpacity key={h.id} activeOpacity={0.9} onPress={() => onTapHelp(h)} style={styles.helpCard}>
                <View style={{ flexDirection: "row", alignItems: "center", justifyContent: "space-between" }}>
                  <View style={styles.tinyAvatar} />
                  <Text style={styles.helpBadge}>
                    {h.taken}/{h.limit}
                  </Text>
                </View>
                <Text numberOfLines={1} style={styles.helpCat}>{h.category || "General"}</Text>
                <Text numberOfLines={2} style={styles.helpTitle}>{h.title}</Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
          <View style={styles.hr} />
        </View>
      }
      renderItem={({ item }) => (
        <View style={styles.postCard}>
          <View style={{ flexDirection: "row", alignItems: "center", gap: 10 }}>
            <View style={styles.avatarSm} />
            <Text style={{ fontWeight: "800", color: COLOR.text }}>{item.name}</Text>
          </View>
          <View style={{ height: 8 }} />
          <Text style={{ color: COLOR.text }}>{item.caption}</Text>
          {item.hasImage && (
            <View style={styles.fakeImage}>
              <Text style={{ color: "#fff", fontWeight: "800" }}>IMAGE</Text>
            </View>
          )}

          {/* ACTIONS — white on black plates to stay visible */}
          <View style={styles.actionsRow}>
            <View style={styles.actionPlate}><IconHeartIG color={COLOR.white} /></View>
            <View style={styles.actionPlate}><IconCommentIG color={COLOR.white} /></View>
            <View style={styles.actionPlate}><IconShareIG color={COLOR.white} /></View>
            <View style={styles.actionPlate}><IconSaveIG color={COLOR.white} /></View>
          </View>
        </View>
      )}
      contentContainerStyle={{ paddingBottom: 90 }}
    />
  );
}

/* -------------------- Help Create -------------------- */
function HelpCreateScreen({ onBack, onSubmit }) {
  const [title, setTitle] = useState("");
  const [details, setDetails] = useState("");
  const [limit, setLimit] = useState("13");
  const [category, setCategory] = useState("General");

  const canSubmit = title.trim().length > 0;

  return (
    <ScrollView contentContainerStyle={{ padding: 16 }}>
      <BackButton onPress={onBack} />
      <Text style={styles.pageTitle}>Request a help</Text>

      <View style={styles.formField}>
        <Text style={styles.label}>Title</Text>
        <TextInput
          placeholder="e.g., Excel sheet keeps breaking"
          placeholderTextColor={COLOR.muted}
          value={title}
          onChangeText={setTitle}
          style={styles.input}
        />
      </View>

      <View style={styles.formField}>
        <Text style={styles.label}>Details</Text>
        <TextInput
          multiline
          numberOfLines={6}
          placeholder="Describe the issue, what you tried, the expected outcome..."
          placeholderTextColor={COLOR.muted}
          value={details}
          onChangeText={setDetails}
          style={[styles.input, { height: 140, textAlignVertical: "top" }]}
        />
      </View>

      <View style={styles.formField}>
        <Text style={styles.label}>Volunteer limit</Text>
        <TextInput
          placeholder="13"
          placeholderTextColor={COLOR.muted}
          value={limit}
          onChangeText={setLimit}
          keyboardType="number-pad"
          style={styles.input}
        />
      </View>

      <View style={styles.formField}>
        <Text style={styles.label}>Category</Text>
        <TextInput
          placeholder="e.g., Accounting, Coding, Marketing"
          placeholderTextColor={COLOR.muted}
          value={category}
          onChangeText={setCategory}
          style={styles.input}
        />
      </View>

      <TouchableOpacity
        activeOpacity={0.9}
        onPress={() => {
          if (!canSubmit) return;
          onSubmit({ title, details, limit, category });
        }}
        style={[styles.cta, { opacity: canSubmit ? 1 : 0.6 }]}
      >
        <Text style={styles.ctaText}>Create help</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

/* -------------------- Help Detail -------------------- */
function HelpDetailScreen({ help, onBack, isRequester, onSubmitSolution, onRate, onTag, onPickWinner }) {
  const [text, setText] = useState("");

  const remaining = Math.max((help.limit || 0) - (help.taken || 0), 0);

  return (
    <ScrollView contentContainerStyle={{ padding: 16, paddingBottom: 120 }}>
      <BackButton onPress={onBack} />
      <Text style={styles.pageTitle}>Help Details</Text>

      <View style={styles.detailCard}>
        <Text style={styles.detailTitle}>{help.title}</Text>
        <Text style={styles.helpCat}>Category: {help.category || "General"}</Text>
        <Text style={styles.detailBody}>{help.details || "No extra details were provided."}</Text>
        <Text style={{ color: COLOR.muted, marginTop: 6 }}>
          Slots: {help.taken || 0}/{help.limit} {remaining === 0 ? "(locked)" : `(remaining ${remaining})`}
        </Text>
      </View>

      {!isRequester && (
        <View style={styles.detailCard}>
          <Text style={styles.label}>Your solution (anonymous)</Text>
          <TextInput
            multiline
            numberOfLines={6}
            value={text}
            onChangeText={setText}
            placeholder="Type your solution here..."
            placeholderTextColor={COLOR.muted}
            style={[styles.input, { height: 120, textAlignVertical: "top" }]}
          />
          <TouchableOpacity
            activeOpacity={0.9}
            onPress={() => {
              onSubmitSolution(help, text);
              setText("");
            }}
            style={[styles.cta, { marginTop: 10 }]}
          >
            <Text style={styles.ctaText}>Volunteer a solution</Text>
          </TouchableOpacity>
          <View style={[styles.banner, { backgroundColor: "#f3f4f6" }]}>
            <Text style={{ color: COLOR.text, textAlign: "center" }}>
              Other volunteers and their answers are hidden to prevent bias.
            </Text>
          </View>
        </View>
      )}

      {isRequester && (
        <View style={styles.detailCard}>
          <Text style={styles.label}>Review volunteers</Text>
          {(help.solutions || []).length === 0 ? (
            <Text style={{ color: COLOR.muted, marginTop: 6 }}>No solutions yet.</Text>
          ) : (
            help.solutions.map((s) => (
              <View key={s.id} style={styles.solutionBox}>
                <Text style={styles.solutionText}>{s.content}</Text>
                <View style={{ height: 8 }} />
                <View style={{ flexDirection: "row", alignItems: "center", gap: 8 }}>
                  {[1, 2, 3, 4, 5].map((n) => (
                    <TouchableOpacity key={n} onPress={() => onRate(s.id, n)}>
                      <Star filled={s.rating >= n} />
                    </TouchableOpacity>
                  ))}
                </View>
                <View style={{ flexDirection: "row", flexWrap: "wrap", gap: 8, marginTop: 8 }}>
                  {["Smart", "Analytical", "Critical thinker", "Practical"].map((t) => (
                    <TouchableOpacity key={t} onPress={() => onTag(s.id, t)} style={styles.chip} activeOpacity={0.8}>
                      <Text style={styles.chipText}>{t}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
                <TouchableOpacity
                  activeOpacity={0.9}
                  onPress={() => onPickWinner(s.id)}
                  style={[styles.winBtn, help.winnerId === s.id && { backgroundColor: "#16a34a" }]}
                >
                  <Text style={[styles.winBtnText, help.winnerId === s.id && { color: "#fff" }]}>
                    {help.winnerId === s.id ? "Winner" : "Choose as winner"}
                  </Text>
                </TouchableOpacity>
              </View>
            ))
          )}
        </View>
      )}
    </ScrollView>
  );
}

/* -------------------- Tabs (WHITE icons) -------------------- */
function BottomTabs({ active, onChange }) {
  return (
    <View style={styles.tabs}>
      <TabIcon active={active === "feed"} onPress={() => onChange("feed")}>
        <IconHomeIG color={COLOR.white} />
      </TabIcon>
      <TabIcon active={active === "employer"} onPress={() => onChange("employer")}>
        <IconBriefcaseIG color={COLOR.white} />
      </TabIcon>
      <TabIcon active={active === "contacts"} onPress={() => onChange("contacts")}>
        <IconUsersIG color={COLOR.white} />
      </TabIcon>
      <TabIcon active={active === "notifications"} onPress={() => onChange("notifications")}>
        <IconBellIG color={COLOR.white} />
      </TabIcon>
      <TabIcon active={active === "profile"} onPress={() => onChange("profile")}>
        <IconUserIG color={COLOR.white} />
      </TabIcon>
    </View>
  );
}
function TabIcon({ children, active, onPress }) {
  return (
    <TouchableOpacity onPress={onPress} style={styles.tabOne} activeOpacity={0.85}>
      <View style={[styles.tabIcon, active && { transform: [{ scale: 1.05 }] }]}>{children}</View>
    </TouchableOpacity>
  );
}

/* -------------------- Common UI -------------------- */
function BackButton({ onPress }) {
  return (
    <TouchableOpacity onPress={onPress} style={styles.backBtn} activeOpacity={0.85}>
      <View style={styles.backIconWrap}>
        <View style={styles.backIconHead} />
        <View style={styles.backIconTail} />
      </View>
      <Text style={styles.backText}>Back</Text>
    </TouchableOpacity>
  );
}
function Star({ filled }) {
  return (
    <View
      style={[
        {
          width: 18,
          height: 18,
          marginRight: 2,
          transform: [{ rotate: "45deg" }],
          borderWidth: 2,
          borderColor: COLOR.text,
          backgroundColor: filled ? COLOR.yellow : "transparent",
        },
      ]}
    />
  );
}

/* -------------------- Instagram-like WHITE Icons -------------------- */
// DM (paper plane)
function IconDM({ color = "#fff" }) {
  return (
    <View style={{ width: 24, height: 20, justifyContent: "center" }}>
      <View style={{ width: 22, height: 2, backgroundColor: color, transform: [{ rotate: "-15deg" }] }} />
      <View style={{ position: "absolute", right: 2, top: 2, width: 10, height: 2, backgroundColor: color, transform: [{ rotate: "45deg" }] }} />
      <View style={{ position: "absolute", right: 2, bottom: 2, width: 10, height: 2, backgroundColor: color, transform: [{ rotate: "-45deg" }] }} />
    </View>
  );
}
// Search lens
function IconSearchIG({ color = "#fff" }) {
  return (
    <View style={{ width: 22, height: 22 }}>
      <View style={{ width: 14, height: 14, borderRadius: 7, borderWidth: 2, borderColor: color }} />
      <View style={{ position: "absolute", right: 0, bottom: 0, width: 8, height: 2, backgroundColor: color, transform: [{ rotate: "45deg" }] }} />
    </View>
  );
}
// Add image glyph (drawn in white; sits on yellow square)
function IconAddImageIG({ color = "#fff" }) {
  return (
    <View style={{ width: 30, height: 30, alignItems: "center", justifyContent: "center" }}>
      <View style={{ width: 18, height: 12, borderWidth: 2, borderColor: color, borderRadius: 3 }} />
      <View style={{ position: "absolute", width: 6, height: 6, borderRadius: 3, backgroundColor: color, top: 8, right: 6 }} />
      <View style={{ position: "absolute", bottom: 9, left: 7, width: 8, height: 4, backgroundColor: color }} />
    </View>
  );
}

/* Feed actions (heart, comment, share, save) */
function IconHeartIG({ color = "#fff" }) {
  return (
    <View style={{ width: 24, height: 22 }}>
      {/* left lobe */}
      <View style={{ position: "absolute", left: 4, top: 2, width: 9, height: 9, borderRadius: 5, borderWidth: 2, borderColor: color }} />
      {/* right lobe */}
      <View style={{ position: "absolute", right: 4, top: 2, width: 9, height: 9, borderRadius: 5, borderWidth: 2, borderColor: color }} />
      {/* bottom V */}
      <View style={{ position: "absolute", left: 3, right: 3, bottom: 2, height: 10, transform: [{ rotate: "45deg" }], borderLeftWidth: 2, borderBottomWidth: 2, borderColor: color }} />
    </View>
  );
}
function IconCommentIG({ color = "#fff" }) {
  return (
    <View style={{ width: 24, height: 20 }}>
      <View style={{ width: 20, height: 14, borderWidth: 2, borderColor: color, borderRadius: 6 }} />
      <View style={{ position: "absolute", left: 10, bottom: 0, width: 8, height: 6, backgroundColor: color, transform: [{ skewX: "-20deg" }] }} />
    </View>
  );
}
function IconShareIG({ color = "#fff" }) {
  return (
    <View style={{ width: 24, height: 20, justifyContent: "center", alignItems: "center" }}>
      {/* paper plane */}
      <View style={{ width: 18, height: 2, backgroundColor: color, transform: [{ rotate: "-25deg" }] }} />
      <View style={{ width: 18, height: 2, backgroundColor: color, transform: [{ rotate: "25deg" }], marginTop: -2 }} />
    </View>
  );
}
function IconSaveIG({ color = "#fff" }) {
  return (
    <View style={{ width: 16, height: 18, borderWidth: 2, borderColor: color, borderRadius: 2 }}>
      <View style={{ position: "absolute", bottom: -1, left: 0, right: 0, height: 8, borderLeftWidth: 2, borderRightWidth: 2, borderColor: color, transform: [{ skewY: "-20deg" }] }} />
    </View>
  );
}

/* Tab icons (WHITE) */
function IconHomeIG({ color = "#fff" }) {
  return (
    <View style={{ width: 22, height: 20 }}>
      <View style={{ width: 20, height: 14, borderWidth: 2, borderColor: color, borderTopLeftRadius: 4, borderTopRightRadius: 4 }} />
      <View style={{ position: "absolute", top: -4, left: 5, width: 12, height: 8, backgroundColor: color }} />
    </View>
  );
}
function IconBriefcaseIG({ color = "#fff" }) {
  return (
    <View style={{ width: 22, height: 18 }}>
      <View style={{ width: 22, height: 14, borderWidth: 2, borderColor: color, borderRadius: 3 }} />
      <View style={{ position: "absolute", top: -3, left: 7, width: 8, height: 6, borderWidth: 2, borderColor: color, backgroundColor: "transparent" }} />
    </View>
  );
}
function IconUsersIG({ color = "#fff" }) {
  return (
    <View style={{ width: 22, height: 18 }}>
      <View style={{ position: "absolute", left: 2, top: 0, width: 8, height: 8, borderRadius: 4, borderWidth: 2, borderColor: color }} />
      <View style={{ position: "absolute", right: 2, top: 2, width: 8, height: 8, borderRadius: 4, borderWidth: 2, borderColor: color }} />
      <View style={{ position: "absolute", left: 0, bottom: 0, width: 12, height: 6, borderWidth: 2, borderColor: color, borderRadius: 3 }} />
      <View style={{ position: "absolute", right: 0, bottom: 0, width: 12, height: 6, borderWidth: 2, borderColor: color, borderRadius: 3 }} />
    </View>
  );
}
function IconBellIG({ color = "#fff" }) {
  return (
    <View style={{ width: 16, height: 18 }}>
      <View style={{ width: 16, height: 12, borderWidth: 2, borderColor: color, borderTopLeftRadius: 8, borderTopRightRadius: 8 }} />
      <View style={{ position: "absolute", bottom: 0, left: 5, width: 6, height: 2, backgroundColor: color }} />
    </View>
  );
}
function IconUserIG({ color = "#fff" }) {
  return (
    <View style={{ width: 18, height: 18 }}>
      <View style={{ width: 10, height: 10, borderRadius: 5, borderWidth: 2, borderColor: color, alignSelf: "center" }} />
      <View style={{ width: 18, height: 8, borderWidth: 2, borderColor: color, borderRadius: 4, position: "absolute", bottom: 0 }} />
    </View>
  );
}

/* -------------------- Styles -------------------- */
const styles = StyleSheet.create({
  topbarWrap: {
    backgroundColor: COLOR.black,
    paddingTop: Platform.OS === "android" ? 6 : 8,
    paddingBottom: 12,
    paddingHorizontal: 12,
    gap: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#111",
  },
  topRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },
  avatar: {
    width: 38,
    height: 38,
    borderRadius: 19,
    backgroundColor: COLOR.white,
    alignItems: "center",
    justifyContent: "center",
    marginRight: 10,
  },
  rankName: { color: COLOR.white, fontWeight: "800", fontSize: 11, marginTop: 4 },
  rankType: { color: "#d1d5db", fontSize: 10 },
  rankBar: {
    marginLeft: 10,
    width: 68,
    height: 20,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#d1d5db",
    overflow: "hidden",
    justifyContent: "center",
    backgroundColor: "#0b0b0b",
  },
  rankFill: { position: "absolute", left: 0, top: 0, bottom: 0, backgroundColor: COLOR.yellow },
  rankPct: { color: COLOR.black, fontWeight: "900", fontSize: 12, textAlign: "center" },
  brand: {
    position: "absolute",
    left: 0, right: 0, top: 0,
    textAlign: "center",
    color: COLOR.white,
    fontSize: 24,
    fontWeight: "900",
    letterSpacing: 1,
  },
  actionRight: { flexDirection: "row", alignItems: "center", gap: 16 },
  postRow: { flexDirection: "row", alignItems: "center", gap: 10, marginTop: 6 },
  postInput: {
    flex: 1,
    height: 42,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "#374151",
    paddingHorizontal: 12,
    color: COLOR.white,
    backgroundColor: "#111827",
  },
  attachBtn: { width: 34, height: 34, borderRadius: 8, backgroundColor: COLOR.yellow, alignItems: "center", justifyContent: "center" },

  sectionTitle: { color: COLOR.text, fontWeight: "800", fontSize: 16 },
  helpCard: {
    width: 130,
    height: 110,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: COLOR.border,
    padding: 10,
    backgroundColor: COLOR.card,
    justifyContent: "space-between",
  },
  helpBadge: {
    paddingHorizontal: 6,
    paddingVertical: 2,
    backgroundColor: COLOR.yellow,
    color: COLOR.black,
    borderRadius: 6,
    overflow: "hidden",
    fontWeight: "800",
  },
  tinyAvatar: { width: 22, height: 22, borderRadius: 11, backgroundColor: "#d1d5db" },
  helpCat: { fontSize: 12, color: "#6b7280", fontWeight: "700" },
  helpTitle: { color: COLOR.text, fontWeight: "800" },
  hr: { height: 1, backgroundColor: COLOR.border, marginTop: 10 },

  postCard: {
    marginHorizontal: 16,
    marginTop: 12,
    borderRadius: RADIUS,
    borderWidth: 1,
    borderColor: COLOR.border,
    backgroundColor: COLOR.card,
    padding: 12,
  },
  avatarSm: { width: 28, height: 28, borderRadius: 14, backgroundColor: "#e5e7eb" },
  fakeImage: {
    height: 180,
    marginTop: 10,
    borderRadius: 12,
    backgroundColor: "#9ca3af",
    alignItems: "center",
    justifyContent: "center",
  },
  actionsRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginTop: 10,
    paddingHorizontal: 10,
  },
  actionPlate: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: COLOR.black,
    alignItems: "center",
    justifyContent: "center",
  },

  pageTitle: { fontSize: 18, fontWeight: "900", color: COLOR.text, marginVertical: 8 },
  formField: { marginTop: 10 },
  label: { color: COLOR.text, fontWeight: "800", marginBottom: 6 },
  input: {
    height: 48,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: COLOR.border,
    paddingHorizontal: 12,
    color: COLOR.text,
    backgroundColor: COLOR.white,
  },
  cta: {
    height: 50,
    borderRadius: 14,
    backgroundColor: COLOR.black,
    alignItems: "center",
    justifyContent: "center",
    marginTop: 14,
  },
  ctaText: { color: COLOR.yellow, fontSize: 16, fontWeight: "900" },

  detailCard: { padding: 12, borderRadius: RADIUS, borderWidth: 1, borderColor: COLOR.border, backgroundColor: COLOR.card, marginTop: 10 },
  detailTitle: { fontSize: 16, fontWeight: "900", color: COLOR.text },
  detailBody: { color: COLOR.text, marginTop: 6 },

  banner: { marginTop: 12, padding: 10, borderRadius: 10 },

  solutionBox: { marginTop: 10, borderWidth: 1, borderColor: COLOR.border, borderRadius: 12, padding: 10, backgroundColor: COLOR.white },
  solutionText: { color: COLOR.text },

  chip: { borderWidth: 1, borderColor: COLOR.border, borderRadius: 999, paddingHorizontal: 10, paddingVertical: 6, backgroundColor: "#f9fafb" },
  chipText: { color: COLOR.text, fontWeight: "700", fontSize: 12 },

  winBtn: { marginTop: 10, height: 40, borderRadius: 10, backgroundColor: "#f3f4f6", alignItems: "center", justifyContent: "center" },
  winBtnText: { fontWeight: "800", color: COLOR.text },

  backBtn: { flexDirection: "row", alignItems: "center", gap: 8 },
  backIconWrap: { width: 18, height: 18, position: "relative" },
  backIconHead: { position: "absolute", left: 0, top: 4, width: 10, height: 10, borderLeftWidth: 3, borderBottomWidth: 3, borderColor: COLOR.text, transform: [{ rotate: "45deg" }] },
  backIconTail: { position: "absolute", right: 0, top: 8, width: 12, height: 2, backgroundColor: COLOR.text },
  backText: { fontWeight: "800", color: COLOR.text },

  tabs: {
    height: 60,
    backgroundColor: COLOR.black,
    borderTopWidth: 1,
    borderTopColor: COLOR.border,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-around",
    paddingBottom: Platform.OS === "ios" ? 8 : 6,
  },
  tabOne: { alignItems: "center", justifyContent: "center", width: 60 },
  tabIcon: { width: 26, height: 26, alignItems: "center", justifyContent: "center" },
});

